//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21373419
// Cuda compilation tools, release 8.0, V8.0.55
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_20
.address_size 64

	// .globl	vectorScalarSet
.func  (.param .b64 func_retval0) __internal_accurate_pow
(
	.param .b64 __internal_accurate_pow_param_0,
	.param .b64 __internal_accurate_pow_param_1
)
;

.visible .entry vectorScalarSet(
	.param .u64 vectorScalarSet_param_0,
	.param .f32 vectorScalarSet_param_1,
	.param .u32 vectorScalarSet_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [vectorScalarSet_param_0];
	ld.param.f32 	%f1, [vectorScalarSet_param_1];
	ld.param.u32 	%r2, [vectorScalarSet_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	st.global.f32 	[%rd4], %f1;

BB0_2:
	ret;
}

	// .globl	matrixDiv
.visible .entry matrixDiv(
	.param .u64 matrixDiv_param_0,
	.param .f32 matrixDiv_param_1,
	.param .u32 matrixDiv_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [matrixDiv_param_0];
	ld.param.f32 	%f1, [matrixDiv_param_1];
	ld.param.u32 	%r2, [matrixDiv_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB1_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f2, [%rd4];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd4], %f3;

BB1_2:
	ret;
}

	// .globl	vectorScalarAdd
.visible .entry vectorScalarAdd(
	.param .u64 vectorScalarAdd_param_0,
	.param .u64 vectorScalarAdd_param_1,
	.param .f32 vectorScalarAdd_param_2,
	.param .u32 vectorScalarAdd_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [vectorScalarAdd_param_0];
	ld.param.u64 	%rd2, [vectorScalarAdd_param_1];
	ld.param.f32 	%f1, [vectorScalarAdd_param_2];
	ld.param.u32 	%r2, [vectorScalarAdd_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB2_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f3;

BB2_2:
	ret;
}

	// .globl	vectorLog
.visible .entry vectorLog(
	.param .u64 vectorLog_param_0,
	.param .u64 vectorLog_param_1,
	.param .u32 vectorLog_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [vectorLog_param_0];
	ld.param.u64 	%rd2, [vectorLog_param_1];
	ld.param.u32 	%r2, [vectorLog_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB3_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	lg2.approx.ftz.f32 	%f2, %f1;
	mul.ftz.f32 	%f3, %f2, 0f3F317218;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f3;

BB3_2:
	ret;
}

	// .globl	vectorExp
.visible .entry vectorExp(
	.param .u64 vectorExp_param_0,
	.param .u64 vectorExp_param_1,
	.param .u32 vectorExp_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [vectorExp_param_0];
	ld.param.u64 	%rd2, [vectorExp_param_1];
	ld.param.u32 	%r2, [vectorExp_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB4_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	mul.ftz.f32 	%f2, %f1, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f3, %f2;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f3;

BB4_2:
	ret;
}

	// .globl	vectorSign
.visible .entry vectorSign(
	.param .u64 vectorSign_param_0,
	.param .u64 vectorSign_param_1,
	.param .u32 vectorSign_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [vectorSign_param_0];
	ld.param.u64 	%rd2, [vectorSign_param_1];
	ld.param.u32 	%r2, [vectorSign_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB5_2;

	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	setp.gt.ftz.f32	%p2, %f1, 0f00000000;
	selp.f32	%f2, 0f3F800000, 0fBF800000, %p2;
	add.s64 	%rd7, %rd3, %rd5;
	st.global.f32 	[%rd7], %f2;

BB5_2:
	ret;
}

	// .globl	vectorAbs
.visible .entry vectorAbs(
	.param .u64 vectorAbs_param_0,
	.param .u64 vectorAbs_param_1,
	.param .u32 vectorAbs_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [vectorAbs_param_0];
	ld.param.u64 	%rd2, [vectorAbs_param_1];
	ld.param.u32 	%r2, [vectorAbs_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB6_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	abs.ftz.f32 	%f2, %f1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f2;

BB6_2:
	ret;
}

	// .globl	vectorDiv
.visible .entry vectorDiv(
	.param .u64 vectorDiv_param_0,
	.param .u64 vectorDiv_param_1,
	.param .u64 vectorDiv_param_2,
	.param .u32 vectorDiv_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [vectorDiv_param_0];
	ld.param.u64 	%rd2, [vectorDiv_param_1];
	ld.param.u64 	%rd3, [vectorDiv_param_2];
	ld.param.u32 	%r2, [vectorDiv_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB7_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f3;

BB7_2:
	ret;
}

	// .globl	vectorMul
.visible .entry vectorMul(
	.param .u64 vectorMul_param_0,
	.param .u64 vectorMul_param_1,
	.param .u64 vectorMul_param_2,
	.param .u32 vectorMul_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [vectorMul_param_0];
	ld.param.u64 	%rd2, [vectorMul_param_1];
	ld.param.u64 	%rd3, [vectorMul_param_2];
	ld.param.u32 	%r2, [vectorMul_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB8_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	mul.ftz.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f3;

BB8_2:
	ret;
}

	// .globl	vectorMax
.visible .entry vectorMax(
	.param .u64 vectorMax_param_0,
	.param .u64 vectorMax_param_1,
	.param .f32 vectorMax_param_2,
	.param .u32 vectorMax_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [vectorMax_param_0];
	ld.param.u64 	%rd2, [vectorMax_param_1];
	ld.param.f32 	%f1, [vectorMax_param_2];
	ld.param.u32 	%r2, [vectorMax_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB9_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	max.ftz.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f3;

BB9_2:
	ret;
}

	// .globl	vectorMin
.visible .entry vectorMin(
	.param .u64 vectorMin_param_0,
	.param .u64 vectorMin_param_1,
	.param .f32 vectorMin_param_2,
	.param .u32 vectorMin_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [vectorMin_param_0];
	ld.param.u64 	%rd2, [vectorMin_param_1];
	ld.param.f32 	%f1, [vectorMin_param_2];
	ld.param.u32 	%r2, [vectorMin_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB10_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	min.ftz.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f3;

BB10_2:
	ret;
}

	// .globl	vectorPow
.visible .entry vectorPow(
	.param .u64 vectorPow_param_0,
	.param .u64 vectorPow_param_1,
	.param .f32 vectorPow_param_2,
	.param .u32 vectorPow_param_3
)
{
	.reg .pred 	%p<21>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<30>;
	.reg .f64 	%fd<24>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd3, [vectorPow_param_0];
	ld.param.u64 	%rd4, [vectorPow_param_1];
	ld.param.f32 	%f2, [vectorPow_param_2];
	ld.param.u32 	%r4, [vectorPow_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	setp.ge.s32	%p2, %r1, %r4;
	@%p2 bra 	BB11_15;

	cvta.to.global.u64 	%rd5, %rd3;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f32 	%f1, [%rd7];
	cvt.ftz.f64.f32	%fd14, %f1;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r2}, %fd14;
	}
	cvt.ftz.f64.f32	%fd1, %f2;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r3}, %fd1;
	}
	bfe.u32 	%r8, %r3, 20, 11;
	add.s32 	%r9, %r8, -1012;
	mov.b64 	 %rd8, %fd1;
	shl.b64 	%rd2, %rd8, %r9;
	setp.eq.s64	%p3, %rd2, -9223372036854775808;
	abs.f64 	%fd2, %fd14;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd2;
	.param .b64 param1;
	st.param.f64	[param1+0], %fd1;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_accurate_pow, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd23, [retval0+0];
	
	//{
	}// Callseq End 0
	setp.lt.s32	%p4, %r2, 0;
	and.pred  	%p1, %p4, %p3;
	@!%p1 bra 	BB11_3;
	bra.uni 	BB11_2;

BB11_2:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r10}, %fd23;
	}
	xor.b32  	%r11, %r10, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r12, %temp}, %fd23;
	}
	mov.b64 	%fd23, {%r12, %r11};

BB11_3:
	mov.f64 	%fd22, %fd23;
	setp.eq.ftz.f32	%p5, %f1, 0f00000000;
	@%p5 bra 	BB11_6;
	bra.uni 	BB11_4;

BB11_6:
	selp.b32	%r13, %r2, 0, %p3;
	or.b32  	%r14, %r13, 2146435072;
	setp.lt.s32	%p9, %r3, 0;
	selp.b32	%r15, %r14, %r13, %p9;
	mov.u32 	%r16, 0;
	mov.b64 	%fd22, {%r16, %r15};
	bra.uni 	BB11_7;

BB11_4:
	setp.gt.s32	%p6, %r2, -1;
	@%p6 bra 	BB11_7;

	cvt.rzi.f64.f64	%fd15, %fd1;
	setp.neu.f64	%p7, %fd15, %fd1;
	selp.f64	%fd22, 0dFFF8000000000000, %fd22, %p7;

BB11_7:
	mov.f64 	%fd8, %fd22;
	add.f64 	%fd9, %fd1, %fd14;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r17}, %fd9;
	}
	and.b32  	%r18, %r17, 2146435072;
	setp.ne.s32	%p10, %r18, 2146435072;
	mov.f64 	%fd21, %fd8;
	@%p10 bra 	BB11_14;

	setp.gtu.f64	%p11, %fd2, 0d7FF0000000000000;
	mov.f64 	%fd21, %fd9;
	@%p11 bra 	BB11_14;

	abs.f64 	%fd10, %fd1;
	setp.gtu.f64	%p12, %fd10, 0d7FF0000000000000;
	mov.f64 	%fd20, %fd9;
	mov.f64 	%fd21, %fd20;
	@%p12 bra 	BB11_14;

	setp.eq.f64	%p13, %fd10, 0d7FF0000000000000;
	@%p13 bra 	BB11_13;
	bra.uni 	BB11_11;

BB11_13:
	setp.gt.f64	%p15, %fd2, 0d3FF0000000000000;
	selp.b32	%r25, 2146435072, 0, %p15;
	xor.b32  	%r26, %r25, 2146435072;
	setp.lt.s32	%p16, %r3, 0;
	selp.b32	%r27, %r26, %r25, %p16;
	setp.eq.ftz.f32	%p17, %f1, 0fBF800000;
	selp.b32	%r28, 1072693248, %r27, %p17;
	mov.u32 	%r29, 0;
	mov.b64 	%fd21, {%r29, %r28};
	bra.uni 	BB11_14;

BB11_11:
	setp.neu.f64	%p14, %fd2, 0d7FF0000000000000;
	mov.f64 	%fd21, %fd8;
	@%p14 bra 	BB11_14;

	shr.s32 	%r19, %r3, 31;
	and.b32  	%r20, %r19, -2146435072;
	add.s32 	%r21, %r20, 2146435072;
	or.b32  	%r22, %r21, -2147483648;
	selp.b32	%r23, %r22, %r21, %p1;
	mov.u32 	%r24, 0;
	mov.b64 	%fd21, {%r24, %r23};

BB11_14:
	setp.eq.ftz.f32	%p18, %f2, 0f00000000;
	setp.eq.ftz.f32	%p19, %f1, 0f3F800000;
	or.pred  	%p20, %p19, %p18;
	cvt.rn.ftz.f32.f64	%f3, %fd21;
	selp.f32	%f4, 0f3F800000, %f3, %p20;
	cvta.to.global.u64 	%rd9, %rd4;
	shl.b64 	%rd10, %rd1, 2;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.f32 	[%rd11], %f4;

BB11_15:
	ret;
}

	// .globl	vectorSqr
.visible .entry vectorSqr(
	.param .u64 vectorSqr_param_0,
	.param .u64 vectorSqr_param_1,
	.param .u32 vectorSqr_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [vectorSqr_param_0];
	ld.param.u64 	%rd2, [vectorSqr_param_1];
	ld.param.u32 	%r2, [vectorSqr_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB12_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	mul.ftz.f32 	%f2, %f1, %f1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f2;

BB12_2:
	ret;
}

	// .globl	vectorSqrt
.visible .entry vectorSqrt(
	.param .u64 vectorSqrt_param_0,
	.param .u64 vectorSqrt_param_1,
	.param .u32 vectorSqrt_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [vectorSqrt_param_0];
	ld.param.u64 	%rd2, [vectorSqrt_param_1];
	ld.param.u32 	%r2, [vectorSqrt_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB13_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	sqrt.approx.ftz.f32 	%f2, %f1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f2;

BB13_2:
	ret;
}

	// .globl	mask
.visible .entry mask(
	.param .u64 mask_param_0,
	.param .f32 mask_param_1,
	.param .f32 mask_param_2,
	.param .u64 mask_param_3,
	.param .u32 mask_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [mask_param_0];
	ld.param.f32 	%f1, [mask_param_1];
	ld.param.f32 	%f2, [mask_param_2];
	ld.param.u64 	%rd3, [mask_param_3];
	ld.param.u32 	%r2, [mask_param_4];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB14_3;

	cvta.to.global.u64 	%rd4, %rd2;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f3, [%rd6];
	setp.neu.ftz.f32	%p2, %f3, %f1;
	@%p2 bra 	BB14_3;

	cvta.to.global.u64 	%rd7, %rd3;
	shl.b64 	%rd8, %rd1, 2;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f2;

BB14_3:
	ret;
}

	// .globl	dropout
.visible .entry dropout(
	.param .u64 dropout_param_0,
	.param .f32 dropout_param_1,
	.param .f32 dropout_param_2,
	.param .u32 dropout_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [dropout_param_0];
	ld.param.f32 	%f2, [dropout_param_1];
	ld.param.f32 	%f1, [dropout_param_2];
	ld.param.u32 	%r2, [dropout_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.lt.s32	%p1, %r1, %r2;
	setp.gt.ftz.f32	%p2, %f2, %f1;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB15_2;
	bra.uni 	BB15_1;

BB15_1:
	cvta.to.global.u64 	%rd2, %rd1;
	mov.f32 	%f3, 0f3F800000;
	sub.ftz.f32 	%f4, %f3, %f1;
	rcp.approx.ftz.f32 	%f5, %f4;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f6, [%rd4];
	mul.ftz.f32 	%f7, %f5, %f6;
	st.global.f32 	[%rd4], %f7;

BB15_2:
	ret;
}

	// .globl	derSoftmax
.visible .entry derSoftmax(
	.param .u64 derSoftmax_param_0,
	.param .u64 derSoftmax_param_1,
	.param .u32 derSoftmax_param_2,
	.param .u64 derSoftmax_param_3,
	.param .u32 derSoftmax_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<15>;
	.reg .b32 	%r<29>;
	.reg .b64 	%rd<20>;


	ld.param.u64 	%rd5, [derSoftmax_param_0];
	ld.param.u64 	%rd6, [derSoftmax_param_1];
	ld.param.u32 	%r12, [derSoftmax_param_2];
	ld.param.u64 	%rd7, [derSoftmax_param_3];
	ld.param.u32 	%r13, [derSoftmax_param_4];
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %ctaid.x;
	mov.u32 	%r16, %tid.x;
	mad.lo.s32 	%r1, %r15, %r14, %r16;
	setp.ge.s32	%p1, %r1, %r13;
	@%p1 bra 	BB16_8;

	setp.lt.s32	%p2, %r12, 1;
	@%p2 bra 	BB16_8;

	mul.lo.s32 	%r24, %r1, %r12;
	mov.u32 	%r17, 0;
	cvta.to.global.u64 	%rd8, %rd7;
	cvta.to.global.u64 	%rd16, %rd6;
	mov.u32 	%r28, %r17;

BB16_3:
	neg.s32 	%r25, %r28;
	mul.wide.s32 	%rd9, %r24, 4;
	add.s64 	%rd1, %rd8, %rd9;
	st.global.u32 	[%rd1], %r17;
	cvta.to.global.u64 	%rd10, %rd5;
	add.s64 	%rd11, %rd10, %rd9;
	ld.global.f32 	%f1, [%rd11];
	mov.f32 	%f8, 0f3F800000;
	sub.ftz.f32 	%f9, %f8, %f1;
	mul.ftz.f32 	%f2, %f1, %f9;
	mul.lo.s32 	%r23, %r12, %r1;
	cvt.s64.s32	%rd12, %r23;
	neg.s64 	%rd19, %rd12;
	mov.f32 	%f13, 0f00000000;
	mov.u32 	%r27, %r17;

BB16_4:
	mov.u32 	%r7, %r27;
	setp.eq.s32	%p3, %r25, 0;
	mov.f32 	%f14, %f2;
	@%p3 bra 	BB16_6;

	shl.b64 	%rd14, %rd19, 2;
	sub.s64 	%rd15, %rd10, %rd14;
	ld.global.f32 	%f10, [%rd15];
	mul.ftz.f32 	%f11, %f1, %f10;
	neg.ftz.f32 	%f4, %f11;
	mov.f32 	%f14, %f4;

BB16_6:
	mov.f32 	%f5, %f14;
	shl.b64 	%rd17, %rd19, 2;
	sub.s64 	%rd18, %rd16, %rd17;
	ld.global.f32 	%f12, [%rd18];
	fma.rn.ftz.f32 	%f13, %f5, %f12, %f13;
	add.s32 	%r25, %r25, 1;
	add.s64 	%rd19, %rd19, -1;
	add.s32 	%r9, %r7, 1;
	setp.lt.s32	%p4, %r9, %r12;
	mov.u32 	%r27, %r9;
	@%p4 bra 	BB16_4;

	st.global.f32 	[%rd1], %f13;
	add.s32 	%r24, %r24, 1;
	add.s32 	%r28, %r28, 1;
	setp.lt.s32	%p5, %r28, %r12;
	@%p5 bra 	BB16_3;

BB16_8:
	ret;
}

	// .globl	MatAdd
.visible .entry MatAdd(
	.param .u64 MatAdd_param_0,
	.param .u64 MatAdd_param_1,
	.param .u32 MatAdd_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [MatAdd_param_0];
	ld.param.u64 	%rd2, [MatAdd_param_1];
	ld.param.u32 	%r2, [MatAdd_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB17_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	add.s64 	%rd7, %rd6, %rd4;
	ld.global.f32 	%f1, [%rd7];
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd7], %f3;

BB17_2:
	ret;
}

	// .globl	addCopy
.visible .entry addCopy(
	.param .u64 addCopy_param_0,
	.param .u64 addCopy_param_1,
	.param .u32 addCopy_param_2,
	.param .u32 addCopy_param_3,
	.param .u32 addCopy_param_4,
	.param .u32 addCopy_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<16>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd7, [addCopy_param_0];
	ld.param.u64 	%rd8, [addCopy_param_1];
	ld.param.u32 	%r6, [addCopy_param_2];
	ld.param.u32 	%r7, [addCopy_param_3];
	ld.param.u32 	%r8, [addCopy_param_4];
	ld.param.u32 	%r9, [addCopy_param_5];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r10, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r10, %r9;
	@%p1 bra 	BB18_4;

	setp.lt.s32	%p2, %r6, 1;
	@%p2 bra 	BB18_4;

	cvta.to.global.u64 	%rd9, %rd8;
	cvta.to.global.u64 	%rd11, %rd7;
	mul.lo.s32 	%r13, %r7, %r10;
	mad.lo.s32 	%r14, %r8, %r6, %r13;
	mul.wide.s32 	%rd10, %r14, 4;
	add.s64 	%rd12, %rd9, %rd10;
	mov.u32 	%r15, 0;

BB18_3:
	ld.global.f32 	%f1, [%rd11];
	st.global.f32 	[%rd12], %f1;
	add.s64 	%rd12, %rd12, 4;
	add.s64 	%rd11, %rd11, 4;
	add.s32 	%r15, %r15, 1;
	setp.lt.s32	%p3, %r15, %r6;
	@%p3 bra 	BB18_3;

BB18_4:
	ret;
}

	// .globl	addBackCopy
.visible .entry addBackCopy(
	.param .u64 addBackCopy_param_0,
	.param .u64 addBackCopy_param_1,
	.param .u32 addBackCopy_param_2,
	.param .u32 addBackCopy_param_3,
	.param .u32 addBackCopy_param_4,
	.param .u32 addBackCopy_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<16>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd7, [addBackCopy_param_0];
	ld.param.u64 	%rd8, [addBackCopy_param_1];
	ld.param.u32 	%r6, [addBackCopy_param_2];
	ld.param.u32 	%r7, [addBackCopy_param_3];
	ld.param.u32 	%r8, [addBackCopy_param_4];
	ld.param.u32 	%r9, [addBackCopy_param_5];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r10, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r10, %r9;
	@%p1 bra 	BB19_4;

	setp.lt.s32	%p2, %r7, 1;
	@%p2 bra 	BB19_4;

	cvta.to.global.u64 	%rd9, %rd8;
	cvta.to.global.u64 	%rd11, %rd7;
	mul.lo.s32 	%r13, %r6, %r10;
	mad.lo.s32 	%r14, %r8, %r7, %r13;
	mul.wide.s32 	%rd10, %r14, 4;
	add.s64 	%rd12, %rd9, %rd10;
	mov.u32 	%r15, 0;

BB19_3:
	ld.global.f32 	%f1, [%rd11];
	st.global.f32 	[%rd12], %f1;
	add.s64 	%rd12, %rd12, 4;
	add.s64 	%rd11, %rd11, 4;
	add.s32 	%r15, %r15, 1;
	setp.lt.s32	%p3, %r15, %r7;
	@%p3 bra 	BB19_3;

BB19_4:
	ret;
}

	// .globl	Softmax
.visible .entry Softmax(
	.param .u64 Softmax_param_0,
	.param .u64 Softmax_param_1,
	.param .u32 Softmax_param_2,
	.param .u64 Softmax_param_3,
	.param .u32 Softmax_param_4
)
{
	.reg .pred 	%p<18>;
	.reg .f32 	%f<21>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<20>;
	.reg .b64 	%rd<36>;


	ld.param.u64 	%rd20, [Softmax_param_0];
	ld.param.u64 	%rd18, [Softmax_param_1];
	ld.param.u32 	%r12, [Softmax_param_2];
	ld.param.u64 	%rd19, [Softmax_param_3];
	ld.param.u32 	%r13, [Softmax_param_4];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r14, %r1, %r2, %r3;
	mul.lo.s32 	%r15, %r14, %r12;
	cvta.to.global.u64 	%rd1, %rd20;
	mul.wide.s32 	%rd21, %r15, 4;
	add.s64 	%rd2, %rd1, %rd21;
	setp.ge.s32	%p1, %r14, %r13;
	@%p1 bra 	BB20_19;

	ld.global.f32 	%f18, [%rd2];
	setp.lt.s32	%p2, %r12, 2;
	@%p2 bra 	BB20_4;

	mul.lo.s32 	%r18, %r12, %r14;
	mul.wide.s32 	%rd22, %r18, 4;
	add.s64 	%rd23, %rd22, %rd1;
	add.s64 	%rd31, %rd23, 4;
	mov.u32 	%r39, 1;

BB20_3:
	ld.global.f32 	%f10, [%rd31];
	setp.gt.ftz.f32	%p3, %f10, %f18;
	selp.f32	%f18, %f10, %f18, %p3;
	add.s64 	%rd31, %rd31, 4;
	add.s32 	%r39, %r39, 1;
	setp.lt.s32	%p4, %r39, %r12;
	@%p4 bra 	BB20_3;

BB20_4:
	mov.f32 	%f20, 0f322BCC77;
	setp.lt.s32	%p5, %r12, 1;
	@%p5 bra 	BB20_16;

	cvta.to.global.u64 	%rd24, %rd18;
	mov.f64 	%fd11, 0d4005BF0A8B145769;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r6}, %fd11;
	}
	mul.lo.s32 	%r21, %r12, %r14;
	mul.wide.s32 	%rd25, %r21, 4;
	add.s64 	%rd33, %rd24, %rd25;
	add.s64 	%rd32, %rd1, %rd25;
	mov.f32 	%f19, 0f00000000;
	mov.u32 	%r40, 0;

BB20_6:
	ld.global.f32 	%f13, [%rd32];
	sub.ftz.f32 	%f6, %f13, %f18;
	cvt.ftz.f64.f32	%fd1, %f6;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r8}, %fd1;
	}
	bfe.u32 	%r22, %r8, 20, 11;
	add.s32 	%r23, %r22, -1012;
	mov.b64 	 %rd26, %fd1;
	shl.b64 	%rd27, %rd26, %r23;
	setp.eq.s64	%p6, %rd27, -9223372036854775808;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd11;
	.param .b64 param1;
	st.param.f64	[param1+0], %fd1;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_accurate_pow, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd19, [retval0+0];
	
	//{
	}// Callseq End 1
	setp.lt.s32	%p7, %r6, 0;
	and.pred  	%p8, %p7, %p6;
	@!%p8 bra 	BB20_8;
	bra.uni 	BB20_7;

BB20_7:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r24}, %fd19;
	}
	xor.b32  	%r25, %r24, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r26, %temp}, %fd19;
	}
	mov.b64 	%fd19, {%r26, %r25};

BB20_8:
	mov.f64 	%fd18, %fd19;
	setp.gt.s32	%p9, %r6, -1;
	@%p9 bra 	BB20_10;

	cvt.rzi.f64.f64	%fd13, %fd1;
	setp.neu.f64	%p10, %fd13, %fd1;
	selp.f64	%fd18, 0dFFF8000000000000, %fd18, %p10;

BB20_10:
	mov.f64 	%fd6, %fd18;
	add.f64 	%fd7, %fd1, 0d4005BF0A8B145769;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r27}, %fd7;
	}
	and.b32  	%r28, %r27, 2146435072;
	setp.ne.s32	%p11, %r28, 2146435072;
	mov.f64 	%fd17, %fd6;
	@%p11 bra 	BB20_14;

	abs.f64 	%fd8, %fd1;
	setp.gtu.f64	%p12, %fd8, 0d7FF0000000000000;
	mov.f64 	%fd17, %fd7;
	@%p12 bra 	BB20_14;

	setp.neu.f64	%p13, %fd8, 0d7FF0000000000000;
	mov.f64 	%fd17, %fd6;
	@%p13 bra 	BB20_14;

	shr.s32 	%r29, %r8, 31;
	and.b32  	%r30, %r29, -2146435072;
	add.s32 	%r31, %r30, 2146435072;
	mov.u32 	%r32, 0;
	mov.b64 	%fd17, {%r32, %r31};

BB20_14:
	cvt.rn.ftz.f32.f64	%f14, %fd17;
	setp.eq.ftz.f32	%p14, %f6, 0f00000000;
	selp.f32	%f15, 0f3F800000, %f14, %p14;
	st.global.f32 	[%rd33], %f15;
	add.ftz.f32 	%f19, %f19, %f15;
	add.s64 	%rd33, %rd33, 4;
	add.s64 	%rd32, %rd32, 4;
	add.s32 	%r40, %r40, 1;
	setp.lt.s32	%p15, %r40, %r12;
	@%p15 bra 	BB20_6;

	add.ftz.f32 	%f20, %f19, 0f322BCC77;

BB20_16:
	@%p5 bra 	BB20_19;

	mul.lo.s32 	%r38, %r12, %r14;
	cvta.to.global.u64 	%rd28, %rd19;
	mul.wide.s32 	%rd29, %r38, 4;
	add.s64 	%rd35, %rd28, %rd29;
	cvta.to.global.u64 	%rd30, %rd18;
	add.s64 	%rd34, %rd30, %rd29;
	mov.u32 	%r41, 0;

BB20_18:
	ld.global.f32 	%f16, [%rd34];
	div.approx.ftz.f32 	%f17, %f16, %f20;
	st.global.f32 	[%rd35], %f17;
	add.s64 	%rd35, %rd35, 4;
	add.s64 	%rd34, %rd34, 4;
	add.s32 	%r41, %r41, 1;
	setp.lt.s32	%p17, %r41, %r12;
	@%p17 bra 	BB20_18;

BB20_19:
	ret;
}

.func  (.param .b64 func_retval0) __internal_accurate_pow(
	.param .b64 __internal_accurate_pow_param_0,
	.param .b64 __internal_accurate_pow_param_1
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<49>;
	.reg .f64 	%fd<135>;


	ld.param.f64 	%fd12, [__internal_accurate_pow_param_0];
	ld.param.f64 	%fd13, [__internal_accurate_pow_param_1];
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r46}, %fd12;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r45, %temp}, %fd12;
	}
	shr.u32 	%r47, %r46, 20;
	setp.ne.s32	%p1, %r47, 0;
	@%p1 bra 	BB21_2;

	mul.f64 	%fd14, %fd12, 0d4350000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r46}, %fd14;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r45, %temp}, %fd14;
	}
	shr.u32 	%r16, %r46, 20;
	add.s32 	%r47, %r16, -54;

BB21_2:
	add.s32 	%r48, %r47, -1023;
	and.b32  	%r17, %r46, -2146435073;
	or.b32  	%r18, %r17, 1072693248;
	mov.b64 	%fd133, {%r45, %r18};
	setp.lt.u32	%p2, %r18, 1073127583;
	@%p2 bra 	BB21_4;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r19, %temp}, %fd133;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r20}, %fd133;
	}
	add.s32 	%r21, %r20, -1048576;
	mov.b64 	%fd133, {%r19, %r21};
	add.s32 	%r48, %r47, -1022;

BB21_4:
	add.f64 	%fd16, %fd133, 0d3FF0000000000000;
	// inline asm
	rcp.approx.ftz.f64 %fd15,%fd16;
	// inline asm
	neg.f64 	%fd17, %fd16;
	mov.f64 	%fd18, 0d3FF0000000000000;
	fma.rn.f64 	%fd19, %fd17, %fd15, %fd18;
	fma.rn.f64 	%fd20, %fd19, %fd19, %fd19;
	fma.rn.f64 	%fd21, %fd20, %fd15, %fd15;
	add.f64 	%fd22, %fd133, 0dBFF0000000000000;
	mul.f64 	%fd23, %fd22, %fd21;
	fma.rn.f64 	%fd24, %fd22, %fd21, %fd23;
	mul.f64 	%fd25, %fd24, %fd24;
	mov.f64 	%fd26, 0d3ED0F5D241AD3B5A;
	mov.f64 	%fd27, 0d3EB0F5FF7D2CAFE2;
	fma.rn.f64 	%fd28, %fd27, %fd25, %fd26;
	mov.f64 	%fd29, 0d3EF3B20A75488A3F;
	fma.rn.f64 	%fd30, %fd28, %fd25, %fd29;
	mov.f64 	%fd31, 0d3F1745CDE4FAECD5;
	fma.rn.f64 	%fd32, %fd30, %fd25, %fd31;
	mov.f64 	%fd33, 0d3F3C71C7258A578B;
	fma.rn.f64 	%fd34, %fd32, %fd25, %fd33;
	mov.f64 	%fd35, 0d3F6249249242B910;
	fma.rn.f64 	%fd36, %fd34, %fd25, %fd35;
	mov.f64 	%fd37, 0d3F89999999999DFB;
	fma.rn.f64 	%fd38, %fd36, %fd25, %fd37;
	sub.f64 	%fd39, %fd22, %fd24;
	add.f64 	%fd40, %fd39, %fd39;
	neg.f64 	%fd41, %fd24;
	fma.rn.f64 	%fd42, %fd41, %fd22, %fd40;
	mul.f64 	%fd43, %fd21, %fd42;
	fma.rn.f64 	%fd44, %fd25, %fd38, 0d3FB5555555555555;
	mov.f64 	%fd45, 0d3FB5555555555555;
	sub.f64 	%fd46, %fd45, %fd44;
	fma.rn.f64 	%fd47, %fd25, %fd38, %fd46;
	add.f64 	%fd48, %fd47, 0d0000000000000000;
	add.f64 	%fd49, %fd48, 0dBC46A4CB00B9E7B0;
	add.f64 	%fd50, %fd44, %fd49;
	sub.f64 	%fd51, %fd44, %fd50;
	add.f64 	%fd52, %fd49, %fd51;
	mul.rn.f64 	%fd53, %fd24, %fd24;
	neg.f64 	%fd54, %fd53;
	fma.rn.f64 	%fd55, %fd24, %fd24, %fd54;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r22, %temp}, %fd43;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r23}, %fd43;
	}
	add.s32 	%r24, %r23, 1048576;
	mov.b64 	%fd56, {%r22, %r24};
	fma.rn.f64 	%fd57, %fd24, %fd56, %fd55;
	mul.rn.f64 	%fd58, %fd53, %fd24;
	neg.f64 	%fd59, %fd58;
	fma.rn.f64 	%fd60, %fd53, %fd24, %fd59;
	fma.rn.f64 	%fd61, %fd53, %fd43, %fd60;
	fma.rn.f64 	%fd62, %fd57, %fd24, %fd61;
	mul.rn.f64 	%fd63, %fd50, %fd58;
	neg.f64 	%fd64, %fd63;
	fma.rn.f64 	%fd65, %fd50, %fd58, %fd64;
	fma.rn.f64 	%fd66, %fd50, %fd62, %fd65;
	fma.rn.f64 	%fd67, %fd52, %fd58, %fd66;
	add.f64 	%fd68, %fd63, %fd67;
	sub.f64 	%fd69, %fd63, %fd68;
	add.f64 	%fd70, %fd67, %fd69;
	add.f64 	%fd71, %fd24, %fd68;
	sub.f64 	%fd72, %fd24, %fd71;
	add.f64 	%fd73, %fd68, %fd72;
	add.f64 	%fd74, %fd70, %fd73;
	add.f64 	%fd75, %fd43, %fd74;
	add.f64 	%fd76, %fd71, %fd75;
	sub.f64 	%fd77, %fd71, %fd76;
	add.f64 	%fd78, %fd75, %fd77;
	xor.b32  	%r25, %r48, -2147483648;
	mov.u32 	%r26, 1127219200;
	mov.b64 	%fd79, {%r25, %r26};
	mov.u32 	%r27, -2147483648;
	mov.b64 	%fd80, {%r27, %r26};
	sub.f64 	%fd81, %fd79, %fd80;
	mov.f64 	%fd82, 0d3FE62E42FEFA39EF;
	fma.rn.f64 	%fd83, %fd81, %fd82, %fd76;
	neg.f64 	%fd84, %fd81;
	fma.rn.f64 	%fd85, %fd84, %fd82, %fd83;
	sub.f64 	%fd86, %fd85, %fd76;
	sub.f64 	%fd87, %fd78, %fd86;
	mov.f64 	%fd88, 0d3C7ABC9E3B39803F;
	fma.rn.f64 	%fd89, %fd81, %fd88, %fd87;
	add.f64 	%fd90, %fd83, %fd89;
	sub.f64 	%fd91, %fd83, %fd90;
	add.f64 	%fd92, %fd89, %fd91;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r28}, %fd13;
	}
	add.s32 	%r29, %r28, %r28;
	setp.gt.u32	%p3, %r29, -33554433;
	and.b32  	%r30, %r28, -15728641;
	selp.b32	%r31, %r30, %r28, %p3;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r32, %temp}, %fd13;
	}
	mov.b64 	%fd93, {%r32, %r31};
	mul.rn.f64 	%fd94, %fd90, %fd93;
	neg.f64 	%fd95, %fd94;
	fma.rn.f64 	%fd96, %fd90, %fd93, %fd95;
	fma.rn.f64 	%fd97, %fd92, %fd93, %fd96;
	add.f64 	%fd4, %fd94, %fd97;
	sub.f64 	%fd98, %fd94, %fd4;
	add.f64 	%fd5, %fd97, %fd98;
	mov.f64 	%fd99, 0d4338000000000000;
	mov.f64 	%fd100, 0d3FF71547652B82FE;
	fma.rn.f64 	%fd101, %fd4, %fd100, %fd99;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r13, %temp}, %fd101;
	}
	mov.f64 	%fd102, 0dC338000000000000;
	add.rn.f64 	%fd103, %fd101, %fd102;
	mov.f64 	%fd104, 0dBFE62E42FEFA39EF;
	fma.rn.f64 	%fd105, %fd103, %fd104, %fd4;
	mov.f64 	%fd106, 0dBC7ABC9E3B39803F;
	fma.rn.f64 	%fd107, %fd103, %fd106, %fd105;
	mov.f64 	%fd108, 0d3E928AF3FCA213EA;
	mov.f64 	%fd109, 0d3E5ADE1569CE2BDF;
	fma.rn.f64 	%fd110, %fd109, %fd107, %fd108;
	mov.f64 	%fd111, 0d3EC71DEE62401315;
	fma.rn.f64 	%fd112, %fd110, %fd107, %fd111;
	mov.f64 	%fd113, 0d3EFA01997C89EB71;
	fma.rn.f64 	%fd114, %fd112, %fd107, %fd113;
	mov.f64 	%fd115, 0d3F2A01A014761F65;
	fma.rn.f64 	%fd116, %fd114, %fd107, %fd115;
	mov.f64 	%fd117, 0d3F56C16C1852B7AF;
	fma.rn.f64 	%fd118, %fd116, %fd107, %fd117;
	mov.f64 	%fd119, 0d3F81111111122322;
	fma.rn.f64 	%fd120, %fd118, %fd107, %fd119;
	mov.f64 	%fd121, 0d3FA55555555502A1;
	fma.rn.f64 	%fd122, %fd120, %fd107, %fd121;
	mov.f64 	%fd123, 0d3FC5555555555511;
	fma.rn.f64 	%fd124, %fd122, %fd107, %fd123;
	mov.f64 	%fd125, 0d3FE000000000000B;
	fma.rn.f64 	%fd126, %fd124, %fd107, %fd125;
	fma.rn.f64 	%fd127, %fd126, %fd107, %fd18;
	fma.rn.f64 	%fd128, %fd127, %fd107, %fd18;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r14, %temp}, %fd128;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r15}, %fd128;
	}
	shl.b32 	%r33, %r13, 20;
	add.s32 	%r34, %r15, %r33;
	mov.b64 	%fd134, {%r14, %r34};
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r35}, %fd4;
	}
	mov.b32 	 %f2, %r35;
	abs.ftz.f32 	%f1, %f2;
	setp.lt.ftz.f32	%p4, %f1, 0f4086232B;
	@%p4 bra 	BB21_7;

	setp.lt.f64	%p5, %fd4, 0d0000000000000000;
	add.f64 	%fd129, %fd4, 0d7FF0000000000000;
	selp.f64	%fd134, 0d0000000000000000, %fd129, %p5;
	setp.geu.ftz.f32	%p6, %f1, 0f40874800;
	@%p6 bra 	BB21_7;

	shr.u32 	%r36, %r13, 31;
	add.s32 	%r37, %r13, %r36;
	shr.s32 	%r38, %r37, 1;
	shl.b32 	%r39, %r38, 20;
	add.s32 	%r40, %r39, %r15;
	mov.b64 	%fd130, {%r14, %r40};
	sub.s32 	%r41, %r13, %r38;
	shl.b32 	%r42, %r41, 20;
	add.s32 	%r43, %r42, 1072693248;
	mov.u32 	%r44, 0;
	mov.b64 	%fd131, {%r44, %r43};
	mul.f64 	%fd134, %fd130, %fd131;

BB21_7:
	abs.f64 	%fd132, %fd134;
	setp.eq.f64	%p7, %fd132, 0d7FF0000000000000;
	@%p7 bra 	BB21_9;

	fma.rn.f64 	%fd134, %fd134, %fd5, %fd134;

BB21_9:
	st.param.f64	[func_retval0+0], %fd134;
	ret;
}


