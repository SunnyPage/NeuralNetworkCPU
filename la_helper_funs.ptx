//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21373419
// Cuda compilation tools, release 8.0, V8.0.55
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_20
.address_size 64

	// .globl	fill
.func  (.param .b64 func_retval0) __internal_accurate_pow
(
	.param .b64 __internal_accurate_pow_param_0
)
;
// imageVector$__cuda_local_var_168147_32_non_const_indexInput has been demoted
// backImageVector$__cuda_local_var_168169_32_non_const_indexInput has been demoted

.visible .entry fill(
	.param .u64 fill_param_0,
	.param .f32 fill_param_1,
	.param .u32 fill_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [fill_param_0];
	ld.param.f32 	%f1, [fill_param_1];
	ld.param.u32 	%r2, [fill_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	st.global.f32 	[%rd4], %f1;

BB0_2:
	ret;
}

	// .globl	gelu
.visible .entry gelu(
	.param .u64 gelu_param_0,
	.param .u64 gelu_param_1,
	.param .u32 gelu_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<40>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [gelu_param_0];
	ld.param.u64 	%rd3, [gelu_param_1];
	ld.param.u32 	%r2, [gelu_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB1_5;

	cvta.to.global.u64 	%rd4, %rd2;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	cvt.ftz.f64.f32	%fd1, %f1;
	lg2.approx.ftz.f32 	%f7, %f1;
	mul.ftz.f32 	%f8, %f7, 0f40400000;
	ex2.approx.ftz.f32 	%f9, %f8;
	cvt.ftz.f64.f32	%fd2, %f9;
	mul.f64 	%fd3, %fd2, 0d3FA2444EE469A184;
	fma.rn.f64 	%fd4, %fd1, 0d3FE9884548DF6CE3, %fd3;
	cvt.rn.ftz.f32.f64	%f2, %fd4;
	abs.ftz.f32 	%f3, %f2;
	setp.ltu.ftz.f32	%p2, %f3, 0f3F0CCCCD;
	@%p2 bra 	BB1_3;
	bra.uni 	BB1_2;

BB1_3:
	mul.ftz.f32 	%f25, %f2, %f2;
	mov.f32 	%f26, 0fBD57BE66;
	mov.f32 	%f27, 0f3C86A81B;
	fma.rn.ftz.f32 	%f28, %f27, %f25, %f26;
	mov.f32 	%f29, 0f3E08677B;
	fma.rn.ftz.f32 	%f30, %f28, %f25, %f29;
	mov.f32 	%f31, 0fBEAAAA29;
	fma.rn.ftz.f32 	%f32, %f30, %f25, %f31;
	mul.ftz.f32 	%f33, %f25, %f32;
	fma.rn.ftz.f32 	%f34, %f33, %f2, %f2;
	add.ftz.f32 	%f35, %f2, %f2;
	setp.eq.ftz.f32	%p4, %f2, 0f00000000;
	selp.f32	%f39, %f35, %f34, %p4;
	bra.uni 	BB1_4;

BB1_2:
	add.ftz.f32 	%f14, %f3, %f3;
	mul.ftz.f32 	%f15, %f14, 0f3FB8AA3B;
	cvt.rzi.ftz.f32.f32	%f16, %f15;
	mov.f32 	%f17, 0fBF317200;
	fma.rn.ftz.f32 	%f18, %f16, %f17, %f14;
	mov.f32 	%f19, 0fB5BFBE8E;
	fma.rn.ftz.f32 	%f20, %f16, %f19, %f18;
	mul.ftz.f32 	%f11, %f20, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f10,%f11;
	// inline asm
	ex2.approx.ftz.f32 	%f21, %f16;
	mov.f32 	%f22, 0f3F800000;
	fma.rn.ftz.f32 	%f13, %f10, %f21, %f22;
	// inline asm
	rcp.approx.ftz.f32 %f12,%f13;
	// inline asm
	mov.f32 	%f23, 0fC0000000;
	fma.rn.ftz.f32 	%f24, %f12, %f23, %f22;
	mov.b32 	 %r6, %f24;
	setp.ltu.ftz.f32	%p3, %f3, 0f42B00000;
	selp.b32	%r7, %r6, 1065353216, %p3;
	mov.b32 	 %r8, %f2;
	and.b32  	%r9, %r8, -2147483648;
	or.b32  	%r10, %r7, %r9;
	mov.b32 	 %f39, %r10;

BB1_4:
	cvta.to.global.u64 	%rd7, %rd3;
	mul.ftz.f32 	%f36, %f1, 0f3F000000;
	add.ftz.f32 	%f37, %f39, 0f3F800000;
	mul.ftz.f32 	%f38, %f36, %f37;
	shl.b64 	%rd8, %rd1, 2;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f38;

BB1_5:
	ret;
}

	// .globl	set
.visible .entry set(
	.param .u64 set_param_0,
	.param .u32 set_param_1,
	.param .f32 set_param_2
)
{
	.reg .f32 	%f<2>;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [set_param_0];
	ld.param.u32 	%r1, [set_param_1];
	ld.param.f32 	%f1, [set_param_2];
	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	st.global.f32 	[%rd4], %f1;
	ret;
}

	// .globl	multiplyIndex
.visible .entry multiplyIndex(
	.param .u64 multiplyIndex_param_0,
	.param .u32 multiplyIndex_param_1,
	.param .u32 multiplyIndex_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [multiplyIndex_param_0];
	ld.param.u32 	%r2, [multiplyIndex_param_1];
	ld.param.u32 	%r3, [multiplyIndex_param_2];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB3_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.lo.s32 	%r7, %r1, %r2;
	cvt.rn.f32.s32	%f1, %r7;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	st.global.f32 	[%rd4], %f1;

BB3_2:
	ret;
}

	// .globl	imageVector
.visible .entry imageVector(
	.param .u64 imageVector_param_0,
	.param .u64 imageVector_param_1,
	.param .u32 imageVector_param_2,
	.param .u32 imageVector_param_3,
	.param .u32 imageVector_param_4,
	.param .u32 imageVector_param_5,
	.param .u64 imageVector_param_6,
	.param .u64 imageVector_param_7
)
{
	.reg .pred 	%p<11>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<53>;
	.reg .b64 	%rd<23>;
	// demoted variable
	.shared .align 4 .u32 imageVector$__cuda_local_var_168147_32_non_const_indexInput;

	ld.param.u64 	%rd7, [imageVector_param_0];
	ld.param.u64 	%rd8, [imageVector_param_1];
	ld.param.u32 	%r22, [imageVector_param_2];
	ld.param.u32 	%r23, [imageVector_param_3];
	ld.param.u32 	%r24, [imageVector_param_4];
	ld.param.u32 	%r25, [imageVector_param_5];
	ld.param.u64 	%rd9, [imageVector_param_6];
	ld.param.u64 	%rd10, [imageVector_param_7];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r26, %ctaid.x;
	mov.u32 	%r27, %tid.x;
	mad.lo.s32 	%r2, %r26, %r1, %r27;
	mov.u32 	%r28, %ctaid.y;
	mov.u32 	%r29, %ntid.y;
	mov.u32 	%r30, %tid.y;
	mad.lo.s32 	%r31, %r28, %r29, %r30;
	mul.lo.s32 	%r3, %r31, %r25;
	or.b32  	%r32, %r30, %r27;
	setp.ne.s32	%p1, %r32, 0;
	@%p1 bra 	BB4_2;

	mov.u32 	%r33, 0;
	st.shared.u32 	[imageVector$__cuda_local_var_168147_32_non_const_indexInput], %r33;

BB4_2:
	mul.lo.s32 	%r34, %r2, %r25;
	mov.u32 	%r35, %nctaid.x;
	mul.lo.s32 	%r36, %r35, %r1;
	mad.lo.s32 	%r51, %r36, %r3, %r34;
	setp.lt.s32	%p2, %r34, %r22;
	setp.lt.s32	%p3, %r3, %r23;
	and.pred  	%p4, %p2, %p3;
	setp.gt.s32	%p5, %r25, 0;
	and.pred  	%p6, %p4, %p5;
	@!%p6 bra 	BB4_10;
	bra.uni 	BB4_3;

BB4_3:
	mov.u32 	%r37, 0;
	cvta.to.global.u64 	%rd11, %rd9;
	cvta.to.global.u64 	%rd14, %rd10;
	cvta.to.global.u64 	%rd17, %rd7;
	cvta.to.global.u64 	%rd19, %rd8;
	mov.u32 	%r49, %r37;

BB4_4:
	mad.lo.s32 	%r43, %r2, %r25, %r49;
	mul.wide.s32 	%rd12, %r43, 4;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.u32 	%r7, [%rd13];
	mov.u32 	%r48, %r37;

BB4_5:
	mov.u32 	%r8, %r48;
	add.s32 	%r44, %r8, %r3;
	mul.wide.s32 	%rd15, %r44, 4;
	add.s64 	%rd16, %rd14, %rd15;
	ld.global.u32 	%r10, [%rd16];
	add.s32 	%r52, %r10, %r7;
	setp.lt.s32	%p7, %r24, 1;
	@%p7 bra 	BB4_8;

	add.s32 	%r46, %r7, %r10;
	mul.wide.s32 	%rd18, %r46, 4;
	add.s64 	%rd22, %rd17, %rd18;
	mul.wide.s32 	%rd20, %r51, 4;
	add.s64 	%rd21, %rd19, %rd20;
	mov.u32 	%r50, 0;

BB4_7:
	ld.global.f32 	%f1, [%rd22];
	st.global.f32 	[%rd21], %f1;
	add.s32 	%r51, %r51, 1;
	add.s32 	%r52, %r52, 1;
	add.s64 	%rd22, %rd22, 4;
	add.s64 	%rd21, %rd21, 4;
	add.s32 	%r50, %r50, 1;
	setp.lt.s32	%p8, %r50, %r24;
	@%p8 bra 	BB4_7;

BB4_8:
	add.s32 	%r20, %r8, 1;
	setp.lt.s32	%p9, %r20, %r25;
	mov.u32 	%r48, %r20;
	@%p9 bra 	BB4_5;

	st.shared.u32 	[imageVector$__cuda_local_var_168147_32_non_const_indexInput], %r52;
	add.s32 	%r49, %r49, 1;
	setp.lt.s32	%p10, %r49, %r25;
	@%p10 bra 	BB4_4;

BB4_10:
	ret;
}

	// .globl	backImageVector
.visible .entry backImageVector(
	.param .u64 backImageVector_param_0,
	.param .u64 backImageVector_param_1,
	.param .u32 backImageVector_param_2,
	.param .u32 backImageVector_param_3,
	.param .u32 backImageVector_param_4,
	.param .u32 backImageVector_param_5,
	.param .u64 backImageVector_param_6,
	.param .u64 backImageVector_param_7
)
{
	.reg .pred 	%p<11>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<53>;
	.reg .b64 	%rd<23>;
	// demoted variable
	.shared .align 4 .u32 backImageVector$__cuda_local_var_168169_32_non_const_indexInput;

	ld.param.u64 	%rd7, [backImageVector_param_0];
	ld.param.u64 	%rd8, [backImageVector_param_1];
	ld.param.u32 	%r22, [backImageVector_param_2];
	ld.param.u32 	%r23, [backImageVector_param_3];
	ld.param.u32 	%r24, [backImageVector_param_4];
	ld.param.u32 	%r25, [backImageVector_param_5];
	ld.param.u64 	%rd9, [backImageVector_param_6];
	ld.param.u64 	%rd10, [backImageVector_param_7];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r26, %ctaid.x;
	mov.u32 	%r27, %tid.x;
	mad.lo.s32 	%r2, %r26, %r1, %r27;
	mov.u32 	%r28, %ctaid.y;
	mov.u32 	%r29, %ntid.y;
	mov.u32 	%r30, %tid.y;
	mad.lo.s32 	%r31, %r28, %r29, %r30;
	mul.lo.s32 	%r3, %r31, %r25;
	or.b32  	%r32, %r30, %r27;
	setp.ne.s32	%p1, %r32, 0;
	@%p1 bra 	BB5_2;

	mov.u32 	%r33, 0;
	st.shared.u32 	[backImageVector$__cuda_local_var_168169_32_non_const_indexInput], %r33;

BB5_2:
	mul.lo.s32 	%r34, %r2, %r25;
	mov.u32 	%r35, %nctaid.x;
	mul.lo.s32 	%r36, %r35, %r1;
	mad.lo.s32 	%r51, %r36, %r3, %r34;
	setp.lt.s32	%p2, %r34, %r22;
	setp.lt.s32	%p3, %r3, %r23;
	and.pred  	%p4, %p2, %p3;
	setp.gt.s32	%p5, %r25, 0;
	and.pred  	%p6, %p4, %p5;
	@!%p6 bra 	BB5_10;
	bra.uni 	BB5_3;

BB5_3:
	mov.u32 	%r37, 0;
	cvta.to.global.u64 	%rd11, %rd9;
	cvta.to.global.u64 	%rd14, %rd10;
	cvta.to.global.u64 	%rd17, %rd8;
	cvta.to.global.u64 	%rd19, %rd7;
	mov.u32 	%r49, %r37;

BB5_4:
	mad.lo.s32 	%r43, %r2, %r25, %r49;
	mul.wide.s32 	%rd12, %r43, 4;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.u32 	%r7, [%rd13];
	mov.u32 	%r48, %r37;

BB5_5:
	mov.u32 	%r8, %r48;
	add.s32 	%r44, %r8, %r3;
	mul.wide.s32 	%rd15, %r44, 4;
	add.s64 	%rd16, %rd14, %rd15;
	ld.global.u32 	%r10, [%rd16];
	add.s32 	%r52, %r10, %r7;
	setp.lt.s32	%p7, %r24, 1;
	@%p7 bra 	BB5_8;

	add.s32 	%r46, %r7, %r10;
	mul.wide.s32 	%rd18, %r46, 4;
	add.s64 	%rd22, %rd17, %rd18;
	mul.wide.s32 	%rd20, %r51, 4;
	add.s64 	%rd21, %rd19, %rd20;
	mov.u32 	%r50, 0;

BB5_7:
	ld.global.f32 	%f1, [%rd21];
	st.global.f32 	[%rd22], %f1;
	add.s32 	%r51, %r51, 1;
	add.s32 	%r52, %r52, 1;
	add.s64 	%rd22, %rd22, 4;
	add.s64 	%rd21, %rd21, 4;
	add.s32 	%r50, %r50, 1;
	setp.lt.s32	%p8, %r50, %r24;
	@%p8 bra 	BB5_7;

BB5_8:
	add.s32 	%r20, %r8, 1;
	setp.lt.s32	%p9, %r20, %r25;
	mov.u32 	%r48, %r20;
	@%p9 bra 	BB5_5;

	st.shared.u32 	[backImageVector$__cuda_local_var_168169_32_non_const_indexInput], %r52;
	add.s32 	%r49, %r49, 1;
	setp.lt.s32	%p10, %r49, %r25;
	@%p10 bra 	BB5_4;

BB5_10:
	ret;
}

	// .globl	add3
.visible .entry add3(
	.param .u64 add3_param_0,
	.param .u64 add3_param_1,
	.param .u32 add3_param_2,
	.param .u32 add3_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [add3_param_0];
	ld.param.u64 	%rd2, [add3_param_1];
	ld.param.u32 	%r3, [add3_param_2];
	ld.param.u32 	%r4, [add3_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r8, %r6, %r5, %r7;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %tid.y;
	mad.lo.s32 	%r1, %r9, %r10, %r11;
	mul.lo.s32 	%r12, %r1, %r5;
	mov.u32 	%r13, %nctaid.x;
	mad.lo.s32 	%r2, %r12, %r13, %r8;
	setp.lt.s32	%p1, %r8, %r3;
	setp.lt.s32	%p2, %r1, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB6_2;
	bra.uni 	BB6_1;

BB6_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r2, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;

BB6_2:
	ret;
}

	// .globl	dot_VectorAndMatrix
.visible .entry dot_VectorAndMatrix(
	.param .u64 dot_VectorAndMatrix_param_0,
	.param .u64 dot_VectorAndMatrix_param_1,
	.param .u64 dot_VectorAndMatrix_param_2,
	.param .u32 dot_VectorAndMatrix_param_3,
	.param .u32 dot_VectorAndMatrix_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [dot_VectorAndMatrix_param_0];
	ld.param.u64 	%rd2, [dot_VectorAndMatrix_param_1];
	ld.param.u64 	%rd3, [dot_VectorAndMatrix_param_2];
	ld.param.u32 	%r4, [dot_VectorAndMatrix_param_3];
	ld.param.u32 	%r5, [dot_VectorAndMatrix_param_4];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r2, %r6, %r1, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r3, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r2, %r4;
	setp.lt.s32	%p2, %r3, %r5;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB7_2;
	bra.uni 	BB7_1;

BB7_1:
	mul.lo.s32 	%r11, %r3, %r1;
	mov.u32 	%r12, %nctaid.x;
	mad.lo.s32 	%r13, %r11, %r12, %r2;
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r3, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.s32 	%rd8, %r13, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	ld.global.f32 	%f2, [%rd6];
	cvta.to.global.u64 	%rd10, %rd3;
	mul.wide.s32 	%rd11, %r2, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.f32 	%f3, [%rd12];
	fma.rn.ftz.f32 	%f4, %f2, %f1, %f3;
	st.global.f32 	[%rd12], %f4;

BB7_2:
	ret;
}

	// .globl	derivativeWeight
.visible .entry derivativeWeight(
	.param .u64 derivativeWeight_param_0,
	.param .u64 derivativeWeight_param_1,
	.param .u64 derivativeWeight_param_2,
	.param .u32 derivativeWeight_param_3,
	.param .u32 derivativeWeight_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [derivativeWeight_param_0];
	ld.param.u64 	%rd2, [derivativeWeight_param_1];
	ld.param.u64 	%rd3, [derivativeWeight_param_2];
	ld.param.u32 	%r4, [derivativeWeight_param_3];
	ld.param.u32 	%r5, [derivativeWeight_param_4];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r2, %r6, %r1, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r3, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r2, %r4;
	setp.lt.s32	%p2, %r3, %r5;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB8_2;
	bra.uni 	BB8_1;

BB8_1:
	mul.lo.s32 	%r11, %r3, %r1;
	mov.u32 	%r12, %nctaid.x;
	mad.lo.s32 	%r13, %r11, %r12, %r2;
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r2, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd1;
	mul.wide.s32 	%rd8, %r3, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	ld.global.f32 	%f2, [%rd6];
	cvta.to.global.u64 	%rd10, %rd3;
	mul.wide.s32 	%rd11, %r13, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.f32 	%f3, [%rd12];
	fma.rn.ftz.f32 	%f4, %f2, %f1, %f3;
	st.global.f32 	[%rd12], %f4;

BB8_2:
	ret;
}

	// .globl	findMean_part
.visible .entry findMean_part(
	.param .u64 findMean_part_param_0,
	.param .u64 findMean_part_param_1,
	.param .u32 findMean_part_param_2,
	.param .u32 findMean_part_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [findMean_part_param_0];
	ld.param.u64 	%rd2, [findMean_part_param_1];
	ld.param.u32 	%r3, [findMean_part_param_2];
	ld.param.u32 	%r4, [findMean_part_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r11, %r8, %r9, %r10;
	mul.lo.s32 	%r2, %r11, %r5;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r11, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB9_2;
	bra.uni 	BB9_1;

BB9_1:
	mov.u32 	%r12, %nctaid.x;
	mad.lo.s32 	%r13, %r2, %r12, %r1;
	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r13, 4;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;

BB9_2:
	ret;
}

	// .globl	generateErrorNorm
.visible .entry generateErrorNorm(
	.param .u64 generateErrorNorm_param_0,
	.param .u64 generateErrorNorm_param_1,
	.param .u64 generateErrorNorm_param_2,
	.param .u32 generateErrorNorm_param_3,
	.param .u32 generateErrorNorm_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [generateErrorNorm_param_0];
	ld.param.u64 	%rd2, [generateErrorNorm_param_1];
	ld.param.u64 	%rd3, [generateErrorNorm_param_2];
	ld.param.u32 	%r3, [generateErrorNorm_param_3];
	ld.param.u32 	%r4, [generateErrorNorm_param_4];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r8, %r6, %r5, %r7;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %tid.y;
	mad.lo.s32 	%r1, %r9, %r10, %r11;
	mul.lo.s32 	%r12, %r1, %r5;
	mov.u32 	%r13, %nctaid.x;
	mad.lo.s32 	%r2, %r12, %r13, %r8;
	setp.lt.s32	%p1, %r8, %r3;
	setp.lt.s32	%p2, %r1, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB10_2;
	bra.uni 	BB10_1;

BB10_1:
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r2, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.s32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	ld.global.f32 	%f2, [%rd6];
	mul.ftz.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd10, %rd3;
	add.s64 	%rd11, %rd10, %rd5;
	st.global.f32 	[%rd11], %f3;

BB10_2:
	ret;
}

	// .globl	derVar_part_2
.visible .entry derVar_part_2(
	.param .u64 derVar_part_2_param_0,
	.param .u64 derVar_part_2_param_1,
	.param .u64 derVar_part_2_param_2,
	.param .u64 derVar_part_2_param_3,
	.param .u32 derVar_part_2_param_4,
	.param .u32 derVar_part_2_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd1, [derVar_part_2_param_0];
	ld.param.u64 	%rd2, [derVar_part_2_param_1];
	ld.param.u64 	%rd3, [derVar_part_2_param_2];
	ld.param.u64 	%rd4, [derVar_part_2_param_3];
	ld.param.u32 	%r3, [derVar_part_2_param_4];
	ld.param.u32 	%r4, [derVar_part_2_param_5];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r11, %r8, %r9, %r10;
	mul.lo.s32 	%r2, %r11, %r5;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r11, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB11_2;
	bra.uni 	BB11_1;

BB11_1:
	mov.u32 	%r12, %nctaid.x;
	mad.lo.s32 	%r13, %r2, %r12, %r1;
	cvta.to.global.u64 	%rd5, %rd1;
	mul.wide.s32 	%rd6, %r13, 4;
	add.s64 	%rd7, %rd5, %rd6;
	cvta.to.global.u64 	%rd8, %rd2;
	add.s64 	%rd9, %rd8, %rd6;
	cvta.to.global.u64 	%rd10, %rd3;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.f32 	%f1, [%rd12];
	ld.global.f32 	%f2, [%rd9];
	sub.ftz.f32 	%f3, %f2, %f1;
	ld.global.f32 	%f4, [%rd7];
	cvta.to.global.u64 	%rd13, %rd4;
	add.s64 	%rd14, %rd13, %rd11;
	ld.global.f32 	%f5, [%rd14];
	fma.rn.ftz.f32 	%f6, %f4, %f3, %f5;
	st.global.f32 	[%rd14], %f6;

BB11_2:
	ret;
}

	// .globl	derMean_part_2
.visible .entry derMean_part_2(
	.param .u64 derMean_part_2_param_0,
	.param .u64 derMean_part_2_param_1,
	.param .u64 derMean_part_2_param_2,
	.param .u64 derMean_part_2_param_3,
	.param .u64 derMean_part_2_param_4,
	.param .u32 derMean_part_2_param_5,
	.param .u32 derMean_part_2_param_6
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd1, [derMean_part_2_param_0];
	ld.param.u64 	%rd2, [derMean_part_2_param_1];
	ld.param.u64 	%rd3, [derMean_part_2_param_2];
	ld.param.u64 	%rd4, [derMean_part_2_param_3];
	ld.param.u64 	%rd5, [derMean_part_2_param_4];
	ld.param.u32 	%r3, [derMean_part_2_param_5];
	ld.param.u32 	%r4, [derMean_part_2_param_6];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r11, %r8, %r9, %r10;
	mul.lo.s32 	%r2, %r11, %r5;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r11, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB12_2;
	bra.uni 	BB12_1;

BB12_1:
	mov.u32 	%r12, %nctaid.x;
	mad.lo.s32 	%r13, %r2, %r12, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd6, %rd7;
	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f32 	%f1, [%rd11];
	ld.global.f32 	%f2, [%rd8];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd11], %f3;
	cvta.to.global.u64 	%rd12, %rd2;
	add.s64 	%rd13, %rd12, %rd7;
	cvta.to.global.u64 	%rd14, %rd3;
	add.s64 	%rd15, %rd14, %rd10;
	ld.global.f32 	%f4, [%rd15];
	ld.global.f32 	%f5, [%rd13];
	sub.ftz.f32 	%f6, %f5, %f4;
	cvta.to.global.u64 	%rd16, %rd5;
	add.s64 	%rd17, %rd16, %rd10;
	ld.global.f32 	%f7, [%rd17];
	add.ftz.f32 	%f8, %f7, %f6;
	st.global.f32 	[%rd17], %f8;

BB12_2:
	ret;
}

	// .globl	derNorm_part_2
.visible .entry derNorm_part_2(
	.param .u64 derNorm_part_2_param_0,
	.param .u64 derNorm_part_2_param_1,
	.param .u64 derNorm_part_2_param_2,
	.param .u64 derNorm_part_2_param_3,
	.param .u64 derNorm_part_2_param_4,
	.param .u64 derNorm_part_2_param_5,
	.param .u64 derNorm_part_2_param_6,
	.param .u32 derNorm_part_2_param_7,
	.param .u32 derNorm_part_2_param_8
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<11>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<24>;


	ld.param.u64 	%rd1, [derNorm_part_2_param_0];
	ld.param.u64 	%rd2, [derNorm_part_2_param_1];
	ld.param.u64 	%rd3, [derNorm_part_2_param_2];
	ld.param.u64 	%rd4, [derNorm_part_2_param_3];
	ld.param.u64 	%rd5, [derNorm_part_2_param_4];
	ld.param.u64 	%rd6, [derNorm_part_2_param_5];
	ld.param.u64 	%rd7, [derNorm_part_2_param_6];
	ld.param.u32 	%r3, [derNorm_part_2_param_7];
	ld.param.u32 	%r4, [derNorm_part_2_param_8];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r11, %r8, %r9, %r10;
	mul.lo.s32 	%r2, %r11, %r5;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r11, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB13_2;
	bra.uni 	BB13_1;

BB13_1:
	mov.u32 	%r12, %nctaid.x;
	mad.lo.s32 	%r13, %r2, %r12, %r1;
	cvta.to.global.u64 	%rd8, %rd1;
	mul.wide.s32 	%rd9, %r13, 4;
	add.s64 	%rd10, %rd8, %rd9;
	cvta.to.global.u64 	%rd11, %rd2;
	mul.wide.s32 	%rd12, %r1, 4;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.f32 	%f1, [%rd13];
	ld.global.f32 	%f2, [%rd10];
	cvta.to.global.u64 	%rd14, %rd3;
	add.s64 	%rd15, %rd14, %rd12;
	cvta.to.global.u64 	%rd16, %rd4;
	add.s64 	%rd17, %rd16, %rd9;
	cvta.to.global.u64 	%rd18, %rd5;
	add.s64 	%rd19, %rd18, %rd12;
	ld.global.f32 	%f3, [%rd19];
	ld.global.f32 	%f4, [%rd17];
	sub.ftz.f32 	%f5, %f4, %f3;
	ld.global.f32 	%f6, [%rd15];
	mul.ftz.f32 	%f7, %f6, %f5;
	fma.rn.ftz.f32 	%f8, %f2, %f1, %f7;
	cvta.to.global.u64 	%rd20, %rd6;
	add.s64 	%rd21, %rd20, %rd12;
	ld.global.f32 	%f9, [%rd21];
	add.ftz.f32 	%f10, %f9, %f8;
	cvta.to.global.u64 	%rd22, %rd7;
	add.s64 	%rd23, %rd22, %rd9;
	st.global.f32 	[%rd23], %f10;

BB13_2:
	ret;
}

	// .globl	derivativeWeight_2
.visible .entry derivativeWeight_2(
	.param .u64 derivativeWeight_2_param_0,
	.param .u64 derivativeWeight_2_param_1,
	.param .u64 derivativeWeight_2_param_2,
	.param .u64 derivativeWeight_2_param_3,
	.param .u64 derivativeWeight_2_param_4,
	.param .u64 derivativeWeight_2_param_5,
	.param .u32 derivativeWeight_2_param_6,
	.param .u32 derivativeWeight_2_param_7
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<11>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<21>;


	ld.param.u64 	%rd1, [derivativeWeight_2_param_0];
	ld.param.u64 	%rd2, [derivativeWeight_2_param_1];
	ld.param.u64 	%rd3, [derivativeWeight_2_param_2];
	ld.param.u64 	%rd4, [derivativeWeight_2_param_3];
	ld.param.u64 	%rd5, [derivativeWeight_2_param_4];
	ld.param.u64 	%rd6, [derivativeWeight_2_param_5];
	ld.param.u32 	%r3, [derivativeWeight_2_param_6];
	ld.param.u32 	%r4, [derivativeWeight_2_param_7];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r8, %r6, %r5, %r7;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %tid.y;
	mad.lo.s32 	%r1, %r9, %r10, %r11;
	mul.lo.s32 	%r12, %r1, %r5;
	mov.u32 	%r13, %nctaid.x;
	mad.lo.s32 	%r2, %r12, %r13, %r8;
	setp.lt.s32	%p1, %r8, %r3;
	setp.lt.s32	%p2, %r1, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB14_2;
	bra.uni 	BB14_1;

BB14_1:
	cvta.to.global.u64 	%rd7, %rd1;
	mul.wide.s32 	%rd8, %r2, 4;
	add.s64 	%rd9, %rd7, %rd8;
	cvta.to.global.u64 	%rd10, %rd5;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.f32 	%f1, [%rd12];
	ld.global.f32 	%f2, [%rd9];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd12], %f3;
	cvta.to.global.u64 	%rd13, %rd2;
	add.s64 	%rd14, %rd13, %rd8;
	cvta.to.global.u64 	%rd15, %rd3;
	add.s64 	%rd16, %rd15, %rd11;
	ld.global.f32 	%f4, [%rd16];
	ld.global.f32 	%f5, [%rd14];
	sub.ftz.f32 	%f6, %f5, %f4;
	cvta.to.global.u64 	%rd17, %rd4;
	add.s64 	%rd18, %rd17, %rd11;
	ld.global.f32 	%f7, [%rd18];
	div.approx.ftz.f32 	%f8, %f6, %f7;
	cvta.to.global.u64 	%rd19, %rd6;
	add.s64 	%rd20, %rd19, %rd11;
	ld.global.f32 	%f9, [%rd20];
	fma.rn.ftz.f32 	%f10, %f2, %f8, %f9;
	st.global.f32 	[%rd20], %f10;

BB14_2:
	ret;
}

	// .globl	findVariance_part
.visible .entry findVariance_part(
	.param .u64 findVariance_part_param_0,
	.param .u64 findVariance_part_param_1,
	.param .u64 findVariance_part_param_2,
	.param .u32 findVariance_part_param_3,
	.param .u32 findVariance_part_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [findVariance_part_param_0];
	ld.param.u64 	%rd2, [findVariance_part_param_1];
	ld.param.u64 	%rd3, [findVariance_part_param_2];
	ld.param.u32 	%r3, [findVariance_part_param_3];
	ld.param.u32 	%r4, [findVariance_part_param_4];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r11, %r8, %r9, %r10;
	mul.lo.s32 	%r2, %r11, %r5;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r11, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB15_2;
	bra.uni 	BB15_1;

BB15_1:
	mov.u32 	%r12, %nctaid.x;
	mad.lo.s32 	%r13, %r2, %r12, %r1;
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r13, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.s32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd10, %rd3;
	add.s64 	%rd11, %rd10, %rd8;
	ld.global.f32 	%f4, [%rd11];
	fma.rn.ftz.f32 	%f5, %f3, %f3, %f4;
	st.global.f32 	[%rd11], %f5;

BB15_2:
	ret;
}

	// .globl	normalization_part_2
.visible .entry normalization_part_2(
	.param .u64 normalization_part_2_param_0,
	.param .u64 normalization_part_2_param_1,
	.param .u64 normalization_part_2_param_2,
	.param .u64 normalization_part_2_param_3,
	.param .u64 normalization_part_2_param_4,
	.param .u64 normalization_part_2_param_5,
	.param .u64 normalization_part_2_param_6,
	.param .u32 normalization_part_2_param_7,
	.param .u32 normalization_part_2_param_8
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<25>;


	ld.param.u64 	%rd1, [normalization_part_2_param_0];
	ld.param.u64 	%rd2, [normalization_part_2_param_1];
	ld.param.u64 	%rd3, [normalization_part_2_param_2];
	ld.param.u64 	%rd4, [normalization_part_2_param_3];
	ld.param.u64 	%rd5, [normalization_part_2_param_4];
	ld.param.u64 	%rd6, [normalization_part_2_param_5];
	ld.param.u64 	%rd7, [normalization_part_2_param_6];
	ld.param.u32 	%r4, [normalization_part_2_param_7];
	ld.param.u32 	%r5, [normalization_part_2_param_8];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r2, %r6, %r1, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r3, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r2, %r4;
	setp.lt.s32	%p2, %r3, %r5;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB16_2;
	bra.uni 	BB16_1;

BB16_1:
	mul.lo.s32 	%r11, %r3, %r1;
	mov.u32 	%r12, %nctaid.x;
	mad.lo.s32 	%r13, %r11, %r12, %r2;
	cvta.to.global.u64 	%rd8, %rd4;
	cvta.to.global.u64 	%rd9, %rd1;
	mul.wide.s32 	%rd10, %r13, 4;
	add.s64 	%rd11, %rd9, %rd10;
	cvta.to.global.u64 	%rd12, %rd2;
	mul.wide.s32 	%rd13, %r2, 4;
	add.s64 	%rd14, %rd12, %rd13;
	ld.global.f32 	%f1, [%rd14];
	ld.global.f32 	%f2, [%rd11];
	sub.ftz.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd15, %rd3;
	add.s64 	%rd16, %rd15, %rd13;
	ld.global.f32 	%f4, [%rd16];
	div.approx.ftz.f32 	%f5, %f3, %f4;
	add.s64 	%rd17, %rd8, %rd10;
	st.global.f32 	[%rd17], %f5;
	cvta.to.global.u64 	%rd18, %rd5;
	mul.wide.s32 	%rd19, %r3, 4;
	add.s64 	%rd20, %rd18, %rd19;
	ld.global.f32 	%f6, [%rd20];
	cvta.to.global.u64 	%rd21, %rd6;
	add.s64 	%rd22, %rd21, %rd19;
	ld.global.f32 	%f7, [%rd22];
	fma.rn.ftz.f32 	%f8, %f5, %f6, %f7;
	cvta.to.global.u64 	%rd23, %rd7;
	add.s64 	%rd24, %rd23, %rd10;
	st.global.f32 	[%rd24], %f8;

BB16_2:
	ret;
}

	// .globl	add_NNMatrix
.visible .entry add_NNMatrix(
	.param .u64 add_NNMatrix_param_0,
	.param .u64 add_NNMatrix_param_1,
	.param .u32 add_NNMatrix_param_2,
	.param .u32 add_NNMatrix_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [add_NNMatrix_param_0];
	ld.param.u64 	%rd2, [add_NNMatrix_param_1];
	ld.param.u32 	%r3, [add_NNMatrix_param_2];
	ld.param.u32 	%r4, [add_NNMatrix_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r8, %r6, %r5, %r7;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %tid.y;
	mad.lo.s32 	%r1, %r9, %r10, %r11;
	mul.lo.s32 	%r12, %r1, %r5;
	mov.u32 	%r13, %nctaid.x;
	mad.lo.s32 	%r2, %r12, %r13, %r8;
	setp.lt.s32	%p1, %r8, %r3;
	setp.lt.s32	%p2, %r1, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB17_2;
	bra.uni 	BB17_1;

BB17_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r2, 4;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;

BB17_2:
	ret;
}

	// .globl	reverse
.visible .entry reverse(
	.param .u64 reverse_param_0,
	.param .u32 reverse_param_1,
	.param .u32 reverse_param_2,
	.param .u32 reverse_param_3,
	.param .u64 reverse_param_4,
	.param .u64 reverse_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<29>;
	.reg .b64 	%rd<17>;


	ld.param.u64 	%rd1, [reverse_param_0];
	ld.param.u32 	%r5, [reverse_param_2];
	ld.param.u32 	%r6, [reverse_param_3];
	ld.param.u64 	%rd2, [reverse_param_4];
	ld.param.u64 	%rd3, [reverse_param_5];
	ld.param.u32 	%r4, [reverse_param_1];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ctaid.y;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	mov.u32 	%r13, %ctaid.z;
	mov.u32 	%r14, %ntid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r13, %r14, %r15;
	shr.u32 	%r16, %r4, 31;
	add.s32 	%r17, %r4, %r16;
	shr.s32 	%r18, %r17, 1;
	add.s32 	%r19, %r18, 1;
	setp.lt.s32	%p1, %r1, %r19;
	setp.lt.s32	%p2, %r2, %r5;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32	%p4, %r3, %r6;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB18_2;
	bra.uni 	BB18_1;

BB18_1:
	cvta.to.global.u64 	%rd4, %rd1;
	cvta.to.global.u64 	%rd5, %rd2;
	cvta.to.global.u64 	%rd6, %rd3;
	add.s32 	%r20, %r4, -1;
	sub.s32 	%r21, %r20, %r1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd5, %rd7;
	mul.wide.s32 	%rd9, %r2, 4;
	add.s64 	%rd10, %rd6, %rd9;
	ld.global.u32 	%r22, [%rd8];
	add.s32 	%r23, %r22, %r3;
	ld.global.u32 	%r24, [%rd10];
	add.s32 	%r25, %r23, %r24;
	mul.wide.s32 	%rd11, %r25, 4;
	add.s64 	%rd12, %rd4, %rd11;
	ld.global.f32 	%f1, [%rd12];
	mul.wide.s32 	%rd13, %r21, 4;
	add.s64 	%rd14, %rd5, %rd13;
	ld.global.u32 	%r26, [%rd14];
	add.s32 	%r27, %r26, %r3;
	add.s32 	%r28, %r27, %r24;
	mul.wide.s32 	%rd15, %r28, 4;
	add.s64 	%rd16, %rd4, %rd15;
	ld.global.f32 	%f2, [%rd16];
	st.global.f32 	[%rd12], %f1;
	st.global.f32 	[%rd16], %f2;

BB18_2:
	ret;
}

	// .globl	set2
.visible .entry set2(
	.param .u64 set2_param_0,
	.param .u32 set2_param_1,
	.param .u32 set2_param_2,
	.param .u32 set2_param_3,
	.param .f32 set2_param_4,
	.param .u64 set2_param_5,
	.param .u64 set2_param_6
)
{
	.reg .f32 	%f<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [set2_param_0];
	ld.param.u32 	%r1, [set2_param_1];
	ld.param.u32 	%r2, [set2_param_2];
	ld.param.u32 	%r3, [set2_param_3];
	ld.param.f32 	%f1, [set2_param_4];
	ld.param.u64 	%rd2, [set2_param_5];
	ld.param.u64 	%rd3, [set2_param_6];
	cvta.to.global.u64 	%rd4, %rd1;
	cvta.to.global.u64 	%rd5, %rd3;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ldu.global.u32 	%r4, [%rd8];
	mul.wide.s32 	%rd9, %r2, 4;
	add.s64 	%rd10, %rd5, %rd9;
	ldu.global.u32 	%r5, [%rd10];
	add.s32 	%r6, %r4, %r3;
	add.s32 	%r7, %r6, %r5;
	mul.wide.s32 	%rd11, %r7, 4;
	add.s64 	%rd12, %rd4, %rd11;
	st.global.f32 	[%rd12], %f1;
	ret;
}

	// .globl	MatAdd
.visible .entry MatAdd(
	.param .u64 MatAdd_param_0,
	.param .u64 MatAdd_param_1,
	.param .u32 MatAdd_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [MatAdd_param_0];
	ld.param.u64 	%rd2, [MatAdd_param_1];
	ld.param.u32 	%r2, [MatAdd_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB20_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	add.s64 	%rd7, %rd6, %rd4;
	ld.global.f32 	%f1, [%rd7];
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd7], %f3;

BB20_2:
	ret;
}

	// .globl	matrixDiv
.visible .entry matrixDiv(
	.param .u64 matrixDiv_param_0,
	.param .f32 matrixDiv_param_1,
	.param .u32 matrixDiv_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [matrixDiv_param_0];
	ld.param.f32 	%f1, [matrixDiv_param_1];
	ld.param.u32 	%r2, [matrixDiv_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB21_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f2, [%rd4];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd4], %f3;

BB21_2:
	ret;
}

	// .globl	vectorScalarSet
.visible .entry vectorScalarSet(
	.param .u64 vectorScalarSet_param_0,
	.param .f32 vectorScalarSet_param_1,
	.param .u32 vectorScalarSet_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [vectorScalarSet_param_0];
	ld.param.f32 	%f1, [vectorScalarSet_param_1];
	ld.param.u32 	%r2, [vectorScalarSet_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB22_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	st.global.f32 	[%rd4], %f1;

BB22_2:
	ret;
}

	// .globl	Softmax
.visible .entry Softmax(
	.param .u64 Softmax_param_0,
	.param .u64 Softmax_param_1,
	.param .u32 Softmax_param_2,
	.param .u64 Softmax_param_3,
	.param .u32 Softmax_param_4
)
{
	.reg .pred 	%p<18>;
	.reg .f32 	%f<21>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<19>;
	.reg .b64 	%rd<36>;


	ld.param.u64 	%rd20, [Softmax_param_0];
	ld.param.u64 	%rd18, [Softmax_param_1];
	ld.param.u32 	%r12, [Softmax_param_2];
	ld.param.u64 	%rd19, [Softmax_param_3];
	ld.param.u32 	%r13, [Softmax_param_4];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r14, %r1, %r2, %r3;
	mul.lo.s32 	%r15, %r14, %r12;
	cvta.to.global.u64 	%rd1, %rd20;
	mul.wide.s32 	%rd21, %r15, 4;
	add.s64 	%rd2, %rd1, %rd21;
	setp.ge.s32	%p1, %r14, %r13;
	@%p1 bra 	BB23_19;

	ld.global.f32 	%f18, [%rd2];
	setp.lt.s32	%p2, %r12, 2;
	@%p2 bra 	BB23_4;

	mul.lo.s32 	%r18, %r12, %r14;
	mul.wide.s32 	%rd22, %r18, 4;
	add.s64 	%rd23, %rd22, %rd1;
	add.s64 	%rd31, %rd23, 4;
	mov.u32 	%r39, 1;

BB23_3:
	ld.global.f32 	%f10, [%rd31];
	setp.gt.ftz.f32	%p3, %f10, %f18;
	selp.f32	%f18, %f10, %f18, %p3;
	add.s64 	%rd31, %rd31, 4;
	add.s32 	%r39, %r39, 1;
	setp.lt.s32	%p4, %r39, %r12;
	@%p4 bra 	BB23_3;

BB23_4:
	mov.f32 	%f20, 0f322BCC77;
	setp.lt.s32	%p5, %r12, 1;
	@%p5 bra 	BB23_16;

	cvta.to.global.u64 	%rd24, %rd18;
	mov.f64 	%fd11, 0d4005BF0A8B145769;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r6}, %fd11;
	}
	mul.lo.s32 	%r21, %r12, %r14;
	mul.wide.s32 	%rd25, %r21, 4;
	add.s64 	%rd33, %rd24, %rd25;
	add.s64 	%rd32, %rd1, %rd25;
	mov.f32 	%f19, 0f00000000;
	mov.u32 	%r40, 0;

BB23_6:
	ld.global.f32 	%f13, [%rd32];
	sub.ftz.f32 	%f6, %f13, %f18;
	cvt.ftz.f64.f32	%fd1, %f6;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r8}, %fd1;
	}
	bfe.u32 	%r22, %r8, 20, 11;
	add.s32 	%r23, %r22, -1012;
	mov.b64 	 %rd26, %fd1;
	shl.b64 	%rd27, %rd26, %r23;
	setp.eq.s64	%p6, %rd27, -9223372036854775808;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd1;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_accurate_pow, 
	(
	param0
	);
	ld.param.f64	%fd18, [retval0+0];
	
	//{
	}// Callseq End 0
	setp.lt.s32	%p7, %r6, 0;
	and.pred  	%p8, %p7, %p6;
	@!%p8 bra 	BB23_8;
	bra.uni 	BB23_7;

BB23_7:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r24}, %fd18;
	}
	xor.b32  	%r25, %r24, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r26, %temp}, %fd18;
	}
	mov.b64 	%fd18, {%r26, %r25};

BB23_8:
	mov.f64 	%fd17, %fd18;
	setp.gt.s32	%p9, %r6, -1;
	@%p9 bra 	BB23_10;

	cvt.rzi.f64.f64	%fd12, %fd1;
	setp.neu.f64	%p10, %fd12, %fd1;
	selp.f64	%fd17, 0dFFF8000000000000, %fd17, %p10;

BB23_10:
	mov.f64 	%fd6, %fd17;
	add.f64 	%fd7, %fd1, 0d4005BF0A8B145769;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r27}, %fd7;
	}
	and.b32  	%r28, %r27, 2146435072;
	setp.ne.s32	%p11, %r28, 2146435072;
	mov.f64 	%fd16, %fd6;
	@%p11 bra 	BB23_14;

	abs.f64 	%fd8, %fd1;
	setp.gtu.f64	%p12, %fd8, 0d7FF0000000000000;
	mov.f64 	%fd16, %fd7;
	@%p12 bra 	BB23_14;

	setp.neu.f64	%p13, %fd8, 0d7FF0000000000000;
	mov.f64 	%fd16, %fd6;
	@%p13 bra 	BB23_14;

	shr.s32 	%r29, %r8, 31;
	and.b32  	%r30, %r29, -2146435072;
	add.s32 	%r31, %r30, 2146435072;
	mov.u32 	%r32, 0;
	mov.b64 	%fd16, {%r32, %r31};

BB23_14:
	cvt.rn.ftz.f32.f64	%f14, %fd16;
	setp.eq.ftz.f32	%p14, %f6, 0f00000000;
	selp.f32	%f15, 0f3F800000, %f14, %p14;
	st.global.f32 	[%rd33], %f15;
	add.ftz.f32 	%f19, %f19, %f15;
	add.s64 	%rd33, %rd33, 4;
	add.s64 	%rd32, %rd32, 4;
	add.s32 	%r40, %r40, 1;
	setp.lt.s32	%p15, %r40, %r12;
	@%p15 bra 	BB23_6;

	add.ftz.f32 	%f20, %f19, 0f322BCC77;

BB23_16:
	@%p5 bra 	BB23_19;

	mul.lo.s32 	%r38, %r12, %r14;
	cvta.to.global.u64 	%rd28, %rd19;
	mul.wide.s32 	%rd29, %r38, 4;
	add.s64 	%rd35, %rd28, %rd29;
	cvta.to.global.u64 	%rd30, %rd18;
	add.s64 	%rd34, %rd30, %rd29;
	mov.u32 	%r41, 0;

BB23_18:
	ld.global.f32 	%f16, [%rd34];
	div.approx.ftz.f32 	%f17, %f16, %f20;
	st.global.f32 	[%rd35], %f17;
	add.s64 	%rd35, %rd35, 4;
	add.s64 	%rd34, %rd34, 4;
	add.s32 	%r41, %r41, 1;
	setp.lt.s32	%p17, %r41, %r12;
	@%p17 bra 	BB23_18;

BB23_19:
	ret;
}

	// .globl	addCopy
.visible .entry addCopy(
	.param .u64 addCopy_param_0,
	.param .u64 addCopy_param_1,
	.param .u32 addCopy_param_2,
	.param .u32 addCopy_param_3,
	.param .u32 addCopy_param_4,
	.param .u32 addCopy_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<16>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd7, [addCopy_param_0];
	ld.param.u64 	%rd8, [addCopy_param_1];
	ld.param.u32 	%r6, [addCopy_param_2];
	ld.param.u32 	%r7, [addCopy_param_3];
	ld.param.u32 	%r8, [addCopy_param_4];
	ld.param.u32 	%r9, [addCopy_param_5];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r10, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r10, %r9;
	@%p1 bra 	BB24_4;

	setp.lt.s32	%p2, %r6, 1;
	@%p2 bra 	BB24_4;

	cvta.to.global.u64 	%rd9, %rd8;
	cvta.to.global.u64 	%rd11, %rd7;
	mul.lo.s32 	%r13, %r7, %r10;
	mad.lo.s32 	%r14, %r8, %r6, %r13;
	mul.wide.s32 	%rd10, %r14, 4;
	add.s64 	%rd12, %rd9, %rd10;
	mov.u32 	%r15, 0;

BB24_3:
	ld.global.f32 	%f1, [%rd11];
	st.global.f32 	[%rd12], %f1;
	add.s64 	%rd12, %rd12, 4;
	add.s64 	%rd11, %rd11, 4;
	add.s32 	%r15, %r15, 1;
	setp.lt.s32	%p3, %r15, %r6;
	@%p3 bra 	BB24_3;

BB24_4:
	ret;
}

	// .globl	normalization_part_1
.visible .entry normalization_part_1(
	.param .u64 normalization_part_1_param_0,
	.param .u64 normalization_part_1_param_1,
	.param .f32 normalization_part_1_param_2,
	.param .u32 normalization_part_1_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [normalization_part_1_param_0];
	ld.param.u64 	%rd2, [normalization_part_1_param_1];
	ld.param.f32 	%f1, [normalization_part_1_param_2];
	ld.param.u32 	%r2, [normalization_part_1_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB25_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	sqrt.approx.ftz.f32 	%f4, %f3;
	cvta.to.global.u64 	%rd6, %rd1;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f4;

BB25_2:
	ret;
}

	// .globl	dropout
.visible .entry dropout(
	.param .u64 dropout_param_0,
	.param .u64 dropout_param_1,
	.param .f64 dropout_param_2,
	.param .u32 dropout_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<6>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [dropout_param_0];
	ld.param.u64 	%rd3, [dropout_param_1];
	ld.param.f64 	%fd1, [dropout_param_2];
	ld.param.u32 	%r2, [dropout_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB26_3;

	cvta.to.global.u64 	%rd4, %rd3;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	cvt.ftz.f64.f32	%fd2, %f1;
	setp.leu.f64	%p2, %fd2, %fd1;
	@%p2 bra 	BB26_3;

	cvta.to.global.u64 	%rd7, %rd2;
	mov.f64 	%fd3, 0d3FF0000000000000;
	sub.f64 	%fd4, %fd3, %fd1;
	rcp.rn.f64 	%fd5, %fd4;
	cvt.rn.ftz.f32.f64	%f2, %fd5;
	shl.b64 	%rd8, %rd1, 2;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f3, [%rd9];
	mul.ftz.f32 	%f4, %f3, %f2;
	st.global.f32 	[%rd9], %f4;

BB26_3:
	ret;
}

	// .globl	sub
.visible .entry sub(
	.param .u64 sub_param_0,
	.param .u64 sub_param_1,
	.param .u64 sub_param_2,
	.param .u32 sub_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [sub_param_0];
	ld.param.u64 	%rd2, [sub_param_1];
	ld.param.u64 	%rd3, [sub_param_2];
	ld.param.u32 	%r2, [sub_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB27_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f3;

BB27_2:
	ret;
}

	// .globl	mul
.visible .entry mul(
	.param .u64 mul_param_0,
	.param .f32 mul_param_1,
	.param .u32 mul_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [mul_param_0];
	ld.param.f32 	%f1, [mul_param_1];
	ld.param.u32 	%r2, [mul_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB28_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f2, [%rd4];
	mul.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd4], %f3;

BB28_2:
	ret;
}

	// .globl	derVar_part_1
.visible .entry derVar_part_1(
	.param .u64 derVar_part_1_param_0,
	.param .f32 derVar_part_1_param_1,
	.param .u64 derVar_part_1_param_2,
	.param .u32 derVar_part_1_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [derVar_part_1_param_0];
	ld.param.f32 	%f1, [derVar_part_1_param_1];
	ld.param.u64 	%rd2, [derVar_part_1_param_2];
	ld.param.u32 	%r2, [derVar_part_1_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB29_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	lg2.approx.ftz.f32 	%f4, %f3;
	mul.ftz.f32 	%f5, %f4, 0fBFC00000;
	ex2.approx.ftz.f32 	%f6, %f5;
	mul.ftz.f32 	%f7, %f6, 0fBF000000;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f7;

BB29_2:
	ret;
}

	// .globl	derVar_part_3
.visible .entry derVar_part_3(
	.param .u64 derVar_part_3_param_0,
	.param .u64 derVar_part_3_param_1,
	.param .u32 derVar_part_3_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [derVar_part_3_param_0];
	ld.param.u64 	%rd2, [derVar_part_3_param_1];
	ld.param.u32 	%r2, [derVar_part_3_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB30_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	ld.global.f32 	%f1, [%rd7];
	ld.global.f32 	%f2, [%rd5];
	mul.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd7], %f3;

BB30_2:
	ret;
}

	// .globl	derMean_part_1
.visible .entry derMean_part_1(
	.param .u64 derMean_part_1_param_0,
	.param .f32 derMean_part_1_param_1,
	.param .u64 derMean_part_1_param_2,
	.param .u32 derMean_part_1_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [derMean_part_1_param_0];
	ld.param.f32 	%f1, [derMean_part_1_param_1];
	ld.param.u64 	%rd2, [derMean_part_1_param_2];
	ld.param.u32 	%r2, [derMean_part_1_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB31_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	sqrt.approx.ftz.f32 	%f4, %f3;
	mov.f32 	%f5, 0fBF800000;
	div.full.ftz.f32 	%f6, %f5, %f4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f6;

BB31_2:
	ret;
}

	// .globl	derMean_part_3
.visible .entry derMean_part_3(
	.param .u64 derMean_part_3_param_0,
	.param .u64 derMean_part_3_param_1,
	.param .u64 derMean_part_3_param_2,
	.param .u32 derMean_part_3_param_3,
	.param .u64 derMean_part_3_param_4,
	.param .u32 derMean_part_3_param_5
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<7>;
	.reg .f64 	%fd<7>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd1, [derMean_part_3_param_0];
	ld.param.u64 	%rd2, [derMean_part_3_param_1];
	ld.param.u64 	%rd3, [derMean_part_3_param_2];
	ld.param.u32 	%r2, [derMean_part_3_param_3];
	ld.param.u64 	%rd4, [derMean_part_3_param_4];
	ld.param.u32 	%r3, [derMean_part_3_param_5];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB32_2;

	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	add.s64 	%rd9, %rd5, %rd7;
	ld.global.f32 	%f1, [%rd9];
	ld.global.f32 	%f2, [%rd8];
	cvta.to.global.u64 	%rd10, %rd2;
	add.s64 	%rd11, %rd10, %rd7;
	ld.global.f32 	%f3, [%rd11];
	cvt.ftz.f64.f32	%fd1, %f3;
	mul.f64 	%fd2, %fd1, 0dC000000000000000;
	cvta.to.global.u64 	%rd12, %rd3;
	add.s64 	%rd13, %rd12, %rd7;
	ld.global.f32 	%f4, [%rd13];
	cvt.ftz.f64.f32	%fd3, %f4;
	mul.f64 	%fd4, %fd2, %fd3;
	cvt.rn.f64.s32	%fd5, %r2;
	div.rn.f64 	%fd6, %fd4, %fd5;
	cvt.rn.ftz.f32.f64	%f5, %fd6;
	fma.rn.ftz.f32 	%f6, %f2, %f1, %f5;
	st.global.f32 	[%rd9], %f6;

BB32_2:
	ret;
}

	// .globl	derNorm_part_1
.visible .entry derNorm_part_1(
	.param .u64 derNorm_part_1_param_0,
	.param .f32 derNorm_part_1_param_1,
	.param .u64 derNorm_part_1_param_2,
	.param .u32 derNorm_part_1_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [derNorm_part_1_param_0];
	ld.param.f32 	%f1, [derNorm_part_1_param_1];
	ld.param.u64 	%rd2, [derNorm_part_1_param_2];
	ld.param.u32 	%r2, [derNorm_part_1_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB33_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	rsqrt.approx.ftz.f32 	%f4, %f3;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f4;

BB33_2:
	ret;
}

	// .globl	pow2
.visible .entry pow2(
	.param .u64 pow2_param_0,
	.param .u32 pow2_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [pow2_param_0];
	ld.param.u32 	%r2, [pow2_param_1];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB34_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f1, [%rd4];
	mul.ftz.f32 	%f2, %f1, %f1;
	st.global.f32 	[%rd4], %f2;

BB34_2:
	ret;
}

	// .globl	sum
.visible .entry sum(
	.param .u64 sum_param_0,
	.param .u64 sum_param_1,
	.param .u32 sum_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd1, [sum_param_0];
	ld.param.u64 	%rd2, [sum_param_1];
	ld.param.u32 	%r2, [sum_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB35_2;

	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ldu.global.f32 	%f1, [%rd3];
	ld.global.f32 	%f2, [%rd6];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd3], %f3;

BB35_2:
	ret;
}

	// .globl	momentum
.visible .entry momentum(
	.param .u64 momentum_param_0,
	.param .u64 momentum_param_1,
	.param .f32 momentum_param_2,
	.param .u32 momentum_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<7>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [momentum_param_0];
	ld.param.u64 	%rd2, [momentum_param_1];
	ld.param.f32 	%f1, [momentum_param_2];
	ld.param.u32 	%r2, [momentum_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB36_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	mul.ftz.f32 	%f3, %f2, %f1;
	cvt.ftz.f64.f32	%fd1, %f3;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	ld.global.f32 	%f4, [%rd7];
	cvt.ftz.f64.f32	%fd2, %f4;
	cvt.ftz.f64.f32	%fd3, %f1;
	mov.f64 	%fd4, 0d3FF0000000000000;
	sub.f64 	%fd5, %fd4, %fd3;
	fma.rn.f64 	%fd6, %fd5, %fd2, %fd1;
	cvt.rn.ftz.f32.f64	%f5, %fd6;
	st.global.f32 	[%rd5], %f5;

BB36_2:
	ret;
}

	// .globl	momentumPow2
.visible .entry momentumPow2(
	.param .u64 momentumPow2_param_0,
	.param .u64 momentumPow2_param_1,
	.param .f32 momentumPow2_param_2,
	.param .u32 momentumPow2_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [momentumPow2_param_0];
	ld.param.u64 	%rd2, [momentumPow2_param_1];
	ld.param.f32 	%f1, [momentumPow2_param_2];
	ld.param.u32 	%r2, [momentumPow2_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB37_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	ld.global.f32 	%f3, [%rd7];
	mov.f32 	%f4, 0f3F800000;
	sub.ftz.f32 	%f5, %f4, %f1;
	mul.ftz.f32 	%f6, %f5, %f3;
	mul.ftz.f32 	%f7, %f3, %f6;
	fma.rn.ftz.f32 	%f8, %f2, %f1, %f7;
	st.global.f32 	[%rd5], %f8;

BB37_2:
	ret;
}

	// .globl	subDivSqrtNorm
.visible .entry subDivSqrtNorm(
	.param .u64 subDivSqrtNorm_param_0,
	.param .u64 subDivSqrtNorm_param_1,
	.param .f32 subDivSqrtNorm_param_2,
	.param .f32 subDivSqrtNorm_param_3,
	.param .f32 subDivSqrtNorm_param_4,
	.param .u64 subDivSqrtNorm_param_5,
	.param .u32 subDivSqrtNorm_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<11>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<10>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [subDivSqrtNorm_param_0];
	ld.param.u64 	%rd2, [subDivSqrtNorm_param_1];
	ld.param.f32 	%f1, [subDivSqrtNorm_param_2];
	ld.param.f32 	%f2, [subDivSqrtNorm_param_3];
	ld.param.f32 	%f3, [subDivSqrtNorm_param_4];
	ld.param.u64 	%rd3, [subDivSqrtNorm_param_5];
	ld.param.u32 	%r2, [subDivSqrtNorm_param_6];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB38_2;

	cvta.to.global.u64 	%rd4, %rd1;
	cvt.ftz.f64.f32	%fd1, %f2;
	add.f64 	%fd2, %fd1, 0d3E7AD7F29ABCAF48;
	cvt.ftz.f64.f32	%fd3, %f1;
	div.rn.f64 	%fd4, %fd3, %fd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f4, [%rd6];
	cvt.ftz.f64.f32	%fd5, %f4;
	mul.f64 	%fd6, %fd4, %fd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f5, [%rd8];
	div.approx.ftz.f32 	%f6, %f5, %f3;
	sqrt.approx.ftz.f32 	%f7, %f6;
	cvt.ftz.f64.f32	%fd7, %f7;
	add.f64 	%fd8, %fd7, 0d3E7AD7F29ABCAF48;
	div.rn.f64 	%fd9, %fd6, %fd8;
	cvt.rn.ftz.f32.f64	%f8, %fd9;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	ld.global.f32 	%f9, [%rd10];
	sub.ftz.f32 	%f10, %f9, %f8;
	st.global.f32 	[%rd10], %f10;

BB38_2:
	ret;
}

	// .globl	addBackCopy
.visible .entry addBackCopy(
	.param .u64 addBackCopy_param_0,
	.param .u64 addBackCopy_param_1,
	.param .u32 addBackCopy_param_2,
	.param .u32 addBackCopy_param_3,
	.param .u64 addBackCopy_param_4,
	.param .u32 addBackCopy_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd5, [addBackCopy_param_0];
	ld.param.u64 	%rd6, [addBackCopy_param_1];
	ld.param.u32 	%r4, [addBackCopy_param_2];
	ld.param.u32 	%r5, [addBackCopy_param_3];
	ld.param.u64 	%rd7, [addBackCopy_param_4];
	ld.param.u32 	%r6, [addBackCopy_param_5];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.s32	%p1, %r1, %r6;
	@%p1 bra 	BB39_5;

	setp.lt.s32	%p2, %r4, 1;
	@%p2 bra 	BB39_5;

	cvta.to.global.u64 	%rd8, %rd7;
	cvta.to.global.u64 	%rd9, %rd6;
	cvta.to.global.u64 	%rd10, %rd5;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	mul.lo.s32 	%r11, %r5, %r4;
	cvt.rn.f32.s32	%f1, %r11;
	ld.global.f32 	%f2, [%rd12];
	add.ftz.f32 	%f3, %f1, %f2;
	cvt.rzi.ftz.s32.f32	%r12, %f3;
	add.s64 	%rd1, %rd8, %rd11;
	mul.wide.s32 	%rd13, %r12, 4;
	add.s64 	%rd14, %rd13, %rd9;
	add.s64 	%rd15, %rd14, -4;
	mov.u32 	%r13, 0;

BB39_3:
	add.s64 	%rd15, %rd15, 4;
	add.s32 	%r13, %r13, 1;
	setp.lt.s32	%p3, %r13, %r4;
	@%p3 bra 	BB39_3;

	ld.global.f32 	%f4, [%rd15];
	st.global.f32 	[%rd1], %f4;

BB39_5:
	ret;
}

	// .globl	dropoutBack
.visible .entry dropoutBack(
	.param .u64 dropoutBack_param_0,
	.param .u64 dropoutBack_param_1,
	.param .f32 dropoutBack_param_2,
	.param .u64 dropoutBack_param_3,
	.param .u32 dropoutBack_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd2, [dropoutBack_param_0];
	ld.param.u64 	%rd3, [dropoutBack_param_1];
	ld.param.f32 	%f1, [dropoutBack_param_2];
	ld.param.u64 	%rd4, [dropoutBack_param_3];
	ld.param.u32 	%r2, [dropoutBack_param_4];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB40_3;

	cvta.to.global.u64 	%rd5, %rd2;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f32 	%f2, [%rd7];
	setp.eq.ftz.f32	%p2, %f2, 0f00000000;
	@%p2 bra 	BB40_3;

	cvta.to.global.u64 	%rd8, %rd4;
	cvta.to.global.u64 	%rd9, %rd3;
	shl.b64 	%rd10, %rd1, 2;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f32 	%f3, [%rd11];
	mul.ftz.f32 	%f4, %f3, %f1;
	add.s64 	%rd12, %rd8, %rd10;
	st.global.f32 	[%rd12], %f4;

BB40_3:
	ret;
}

	// .globl	derGelu
.visible .entry derGelu(
	.param .u64 derGelu_param_0,
	.param .u64 derGelu_param_1,
	.param .u64 derGelu_param_2,
	.param .u32 derGelu_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<44>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<13>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd2, [derGelu_param_0];
	ld.param.u64 	%rd3, [derGelu_param_1];
	ld.param.u64 	%rd4, [derGelu_param_2];
	ld.param.u32 	%r2, [derGelu_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB41_5;

	cvta.to.global.u64 	%rd5, %rd2;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f32 	%f1, [%rd7];
	cvt.ftz.f64.f32	%fd1, %f1;
	lg2.approx.ftz.f32 	%f7, %f1;
	mul.ftz.f32 	%f8, %f7, 0f40400000;
	ex2.approx.ftz.f32 	%f9, %f8;
	cvt.ftz.f64.f32	%fd2, %f9;
	mul.f64 	%fd3, %fd2, 0d3FA2444EE469A184;
	fma.rn.f64 	%fd4, %fd1, 0d3FE9884548DF6CE3, %fd3;
	cvt.rn.ftz.f32.f64	%f2, %fd4;
	abs.ftz.f32 	%f3, %f2;
	setp.ltu.ftz.f32	%p2, %f3, 0f3F0CCCCD;
	@%p2 bra 	BB41_3;
	bra.uni 	BB41_2;

BB41_3:
	mul.ftz.f32 	%f25, %f2, %f2;
	mov.f32 	%f26, 0fBD57BE66;
	mov.f32 	%f27, 0f3C86A81B;
	fma.rn.ftz.f32 	%f28, %f27, %f25, %f26;
	mov.f32 	%f29, 0f3E08677B;
	fma.rn.ftz.f32 	%f30, %f28, %f25, %f29;
	mov.f32 	%f31, 0fBEAAAA29;
	fma.rn.ftz.f32 	%f32, %f30, %f25, %f31;
	mul.ftz.f32 	%f33, %f25, %f32;
	fma.rn.ftz.f32 	%f34, %f33, %f2, %f2;
	add.ftz.f32 	%f35, %f2, %f2;
	setp.eq.ftz.f32	%p4, %f2, 0f00000000;
	selp.f32	%f43, %f35, %f34, %p4;
	bra.uni 	BB41_4;

BB41_2:
	add.ftz.f32 	%f14, %f3, %f3;
	mul.ftz.f32 	%f15, %f14, 0f3FB8AA3B;
	cvt.rzi.ftz.f32.f32	%f16, %f15;
	mov.f32 	%f17, 0fBF317200;
	fma.rn.ftz.f32 	%f18, %f16, %f17, %f14;
	mov.f32 	%f19, 0fB5BFBE8E;
	fma.rn.ftz.f32 	%f20, %f16, %f19, %f18;
	mul.ftz.f32 	%f11, %f20, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f10,%f11;
	// inline asm
	ex2.approx.ftz.f32 	%f21, %f16;
	mov.f32 	%f22, 0f3F800000;
	fma.rn.ftz.f32 	%f13, %f10, %f21, %f22;
	// inline asm
	rcp.approx.ftz.f32 %f12,%f13;
	// inline asm
	mov.f32 	%f23, 0fC0000000;
	fma.rn.ftz.f32 	%f24, %f12, %f23, %f22;
	mov.b32 	 %r6, %f24;
	setp.ltu.ftz.f32	%p3, %f3, 0f42B00000;
	selp.b32	%r7, %r6, 1065353216, %p3;
	mov.b32 	 %r8, %f2;
	and.b32  	%r9, %r8, -2147483648;
	or.b32  	%r10, %r7, %r9;
	mov.b32 	 %f43, %r10;

BB41_4:
	cvta.to.global.u64 	%rd8, %rd3;
	cvta.to.global.u64 	%rd9, %rd4;
	shl.b64 	%rd10, %rd1, 2;
	add.s64 	%rd11, %rd8, %rd10;
	ld.global.f32 	%f36, [%rd11];
	cvt.ftz.f64.f32	%fd5, %f36;
	mul.f64 	%fd6, %fd5, 0d3FE0000000000000;
	add.ftz.f32 	%f37, %f43, 0f3F800000;
	cvt.ftz.f64.f32	%fd7, %f37;
	mul.ftz.f32 	%f38, %f43, %f43;
	mov.f32 	%f39, 0f3F800000;
	sub.ftz.f32 	%f40, %f39, %f38;
	mul.ftz.f32 	%f41, %f1, %f40;
	cvt.ftz.f64.f32	%fd8, %f41;
	mul.f64 	%fd9, %fd1, 0d3FBB6676569E7246;
	fma.rn.f64 	%fd10, %fd1, %fd9, 0d3FE9884D6131C926;
	fma.rn.f64 	%fd11, %fd10, %fd8, %fd7;
	mul.f64 	%fd12, %fd6, %fd11;
	cvt.rn.ftz.f32.f64	%f42, %fd12;
	add.s64 	%rd12, %rd9, %rd10;
	st.global.f32 	[%rd12], %f42;

BB41_5:
	ret;
}

	// .globl	derSoftmax
.visible .entry derSoftmax(
	.param .u64 derSoftmax_param_0,
	.param .u64 derSoftmax_param_1,
	.param .u32 derSoftmax_param_2,
	.param .u64 derSoftmax_param_3,
	.param .u32 derSoftmax_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<15>;
	.reg .b32 	%r<29>;
	.reg .b64 	%rd<20>;


	ld.param.u64 	%rd5, [derSoftmax_param_0];
	ld.param.u64 	%rd6, [derSoftmax_param_1];
	ld.param.u32 	%r12, [derSoftmax_param_2];
	ld.param.u64 	%rd7, [derSoftmax_param_3];
	ld.param.u32 	%r13, [derSoftmax_param_4];
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %ctaid.x;
	mov.u32 	%r16, %tid.x;
	mad.lo.s32 	%r1, %r15, %r14, %r16;
	setp.ge.s32	%p1, %r1, %r13;
	@%p1 bra 	BB42_8;

	setp.lt.s32	%p2, %r12, 1;
	@%p2 bra 	BB42_8;

	mul.lo.s32 	%r24, %r1, %r12;
	mov.u32 	%r17, 0;
	cvta.to.global.u64 	%rd8, %rd7;
	cvta.to.global.u64 	%rd16, %rd6;
	mov.u32 	%r28, %r17;

BB42_3:
	neg.s32 	%r25, %r28;
	mul.wide.s32 	%rd9, %r24, 4;
	add.s64 	%rd1, %rd8, %rd9;
	st.global.u32 	[%rd1], %r17;
	cvta.to.global.u64 	%rd10, %rd5;
	add.s64 	%rd11, %rd10, %rd9;
	ld.global.f32 	%f1, [%rd11];
	mov.f32 	%f8, 0f3F800000;
	sub.ftz.f32 	%f9, %f8, %f1;
	mul.ftz.f32 	%f2, %f1, %f9;
	mul.lo.s32 	%r23, %r12, %r1;
	cvt.s64.s32	%rd12, %r23;
	neg.s64 	%rd19, %rd12;
	mov.f32 	%f13, 0f00000000;
	mov.u32 	%r27, %r17;

BB42_4:
	mov.u32 	%r7, %r27;
	setp.eq.s32	%p3, %r25, 0;
	mov.f32 	%f14, %f2;
	@%p3 bra 	BB42_6;

	shl.b64 	%rd14, %rd19, 2;
	sub.s64 	%rd15, %rd10, %rd14;
	ld.global.f32 	%f10, [%rd15];
	mul.ftz.f32 	%f11, %f1, %f10;
	neg.ftz.f32 	%f4, %f11;
	mov.f32 	%f14, %f4;

BB42_6:
	mov.f32 	%f5, %f14;
	shl.b64 	%rd17, %rd19, 2;
	sub.s64 	%rd18, %rd16, %rd17;
	ld.global.f32 	%f12, [%rd18];
	fma.rn.ftz.f32 	%f13, %f5, %f12, %f13;
	add.s32 	%r25, %r25, 1;
	add.s64 	%rd19, %rd19, -1;
	add.s32 	%r9, %r7, 1;
	setp.lt.s32	%p4, %r9, %r12;
	mov.u32 	%r27, %r9;
	@%p4 bra 	BB42_4;

	st.global.f32 	[%rd1], %f13;
	add.s32 	%r24, %r24, 1;
	add.s32 	%r28, %r28, 1;
	setp.lt.s32	%p5, %r28, %r12;
	@%p5 bra 	BB42_3;

BB42_8:
	ret;
}

.func  (.param .b64 func_retval0) __internal_accurate_pow(
	.param .b64 __internal_accurate_pow_param_0
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<49>;
	.reg .f64 	%fd<135>;


	ld.param.f64 	%fd12, [__internal_accurate_pow_param_0];
	mov.f64 	%fd13, 0d4005BF0A8B145769;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r46}, %fd13;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r45, %temp}, %fd13;
	}
	shr.u32 	%r47, %r46, 20;
	setp.ne.s32	%p1, %r47, 0;
	@%p1 bra 	BB43_2;

	mov.f64 	%fd14, 0d4365BF0A8B145769;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r46}, %fd14;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r45, %temp}, %fd14;
	}
	shr.u32 	%r16, %r46, 20;
	add.s32 	%r47, %r16, -54;

BB43_2:
	add.s32 	%r48, %r47, -1023;
	and.b32  	%r17, %r46, -2146435073;
	or.b32  	%r18, %r17, 1072693248;
	mov.b64 	%fd133, {%r45, %r18};
	setp.lt.u32	%p2, %r18, 1073127583;
	@%p2 bra 	BB43_4;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r19, %temp}, %fd133;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r20}, %fd133;
	}
	add.s32 	%r21, %r20, -1048576;
	mov.b64 	%fd133, {%r19, %r21};
	add.s32 	%r48, %r47, -1022;

BB43_4:
	add.f64 	%fd16, %fd133, 0d3FF0000000000000;
	// inline asm
	rcp.approx.ftz.f64 %fd15,%fd16;
	// inline asm
	neg.f64 	%fd17, %fd16;
	mov.f64 	%fd18, 0d3FF0000000000000;
	fma.rn.f64 	%fd19, %fd17, %fd15, %fd18;
	fma.rn.f64 	%fd20, %fd19, %fd19, %fd19;
	fma.rn.f64 	%fd21, %fd20, %fd15, %fd15;
	add.f64 	%fd22, %fd133, 0dBFF0000000000000;
	mul.f64 	%fd23, %fd22, %fd21;
	fma.rn.f64 	%fd24, %fd22, %fd21, %fd23;
	mul.f64 	%fd25, %fd24, %fd24;
	mov.f64 	%fd26, 0d3ED0F5D241AD3B5A;
	mov.f64 	%fd27, 0d3EB0F5FF7D2CAFE2;
	fma.rn.f64 	%fd28, %fd27, %fd25, %fd26;
	mov.f64 	%fd29, 0d3EF3B20A75488A3F;
	fma.rn.f64 	%fd30, %fd28, %fd25, %fd29;
	mov.f64 	%fd31, 0d3F1745CDE4FAECD5;
	fma.rn.f64 	%fd32, %fd30, %fd25, %fd31;
	mov.f64 	%fd33, 0d3F3C71C7258A578B;
	fma.rn.f64 	%fd34, %fd32, %fd25, %fd33;
	mov.f64 	%fd35, 0d3F6249249242B910;
	fma.rn.f64 	%fd36, %fd34, %fd25, %fd35;
	mov.f64 	%fd37, 0d3F89999999999DFB;
	fma.rn.f64 	%fd38, %fd36, %fd25, %fd37;
	sub.f64 	%fd39, %fd22, %fd24;
	add.f64 	%fd40, %fd39, %fd39;
	neg.f64 	%fd41, %fd24;
	fma.rn.f64 	%fd42, %fd41, %fd22, %fd40;
	mul.f64 	%fd43, %fd21, %fd42;
	fma.rn.f64 	%fd44, %fd25, %fd38, 0d3FB5555555555555;
	mov.f64 	%fd45, 0d3FB5555555555555;
	sub.f64 	%fd46, %fd45, %fd44;
	fma.rn.f64 	%fd47, %fd25, %fd38, %fd46;
	add.f64 	%fd48, %fd47, 0d0000000000000000;
	add.f64 	%fd49, %fd48, 0dBC46A4CB00B9E7B0;
	add.f64 	%fd50, %fd44, %fd49;
	sub.f64 	%fd51, %fd44, %fd50;
	add.f64 	%fd52, %fd49, %fd51;
	mul.rn.f64 	%fd53, %fd24, %fd24;
	neg.f64 	%fd54, %fd53;
	fma.rn.f64 	%fd55, %fd24, %fd24, %fd54;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r22, %temp}, %fd43;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r23}, %fd43;
	}
	add.s32 	%r24, %r23, 1048576;
	mov.b64 	%fd56, {%r22, %r24};
	fma.rn.f64 	%fd57, %fd24, %fd56, %fd55;
	mul.rn.f64 	%fd58, %fd53, %fd24;
	neg.f64 	%fd59, %fd58;
	fma.rn.f64 	%fd60, %fd53, %fd24, %fd59;
	fma.rn.f64 	%fd61, %fd53, %fd43, %fd60;
	fma.rn.f64 	%fd62, %fd57, %fd24, %fd61;
	mul.rn.f64 	%fd63, %fd50, %fd58;
	neg.f64 	%fd64, %fd63;
	fma.rn.f64 	%fd65, %fd50, %fd58, %fd64;
	fma.rn.f64 	%fd66, %fd50, %fd62, %fd65;
	fma.rn.f64 	%fd67, %fd52, %fd58, %fd66;
	add.f64 	%fd68, %fd63, %fd67;
	sub.f64 	%fd69, %fd63, %fd68;
	add.f64 	%fd70, %fd67, %fd69;
	add.f64 	%fd71, %fd24, %fd68;
	sub.f64 	%fd72, %fd24, %fd71;
	add.f64 	%fd73, %fd68, %fd72;
	add.f64 	%fd74, %fd70, %fd73;
	add.f64 	%fd75, %fd43, %fd74;
	add.f64 	%fd76, %fd71, %fd75;
	sub.f64 	%fd77, %fd71, %fd76;
	add.f64 	%fd78, %fd75, %fd77;
	xor.b32  	%r25, %r48, -2147483648;
	mov.u32 	%r26, 1127219200;
	mov.b64 	%fd79, {%r25, %r26};
	mov.u32 	%r27, -2147483648;
	mov.b64 	%fd80, {%r27, %r26};
	sub.f64 	%fd81, %fd79, %fd80;
	mov.f64 	%fd82, 0d3FE62E42FEFA39EF;
	fma.rn.f64 	%fd83, %fd81, %fd82, %fd76;
	neg.f64 	%fd84, %fd81;
	fma.rn.f64 	%fd85, %fd84, %fd82, %fd83;
	sub.f64 	%fd86, %fd85, %fd76;
	sub.f64 	%fd87, %fd78, %fd86;
	mov.f64 	%fd88, 0d3C7ABC9E3B39803F;
	fma.rn.f64 	%fd89, %fd81, %fd88, %fd87;
	add.f64 	%fd90, %fd83, %fd89;
	sub.f64 	%fd91, %fd83, %fd90;
	add.f64 	%fd92, %fd89, %fd91;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r28}, %fd12;
	}
	add.s32 	%r29, %r28, %r28;
	setp.gt.u32	%p3, %r29, -33554433;
	and.b32  	%r30, %r28, -15728641;
	selp.b32	%r31, %r30, %r28, %p3;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r32, %temp}, %fd12;
	}
	mov.b64 	%fd93, {%r32, %r31};
	mul.rn.f64 	%fd94, %fd90, %fd93;
	neg.f64 	%fd95, %fd94;
	fma.rn.f64 	%fd96, %fd90, %fd93, %fd95;
	fma.rn.f64 	%fd97, %fd92, %fd93, %fd96;
	add.f64 	%fd4, %fd94, %fd97;
	sub.f64 	%fd98, %fd94, %fd4;
	add.f64 	%fd5, %fd97, %fd98;
	mov.f64 	%fd99, 0d4338000000000000;
	mov.f64 	%fd100, 0d3FF71547652B82FE;
	fma.rn.f64 	%fd101, %fd4, %fd100, %fd99;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r13, %temp}, %fd101;
	}
	mov.f64 	%fd102, 0dC338000000000000;
	add.rn.f64 	%fd103, %fd101, %fd102;
	mov.f64 	%fd104, 0dBFE62E42FEFA39EF;
	fma.rn.f64 	%fd105, %fd103, %fd104, %fd4;
	mov.f64 	%fd106, 0dBC7ABC9E3B39803F;
	fma.rn.f64 	%fd107, %fd103, %fd106, %fd105;
	mov.f64 	%fd108, 0d3E928AF3FCA213EA;
	mov.f64 	%fd109, 0d3E5ADE1569CE2BDF;
	fma.rn.f64 	%fd110, %fd109, %fd107, %fd108;
	mov.f64 	%fd111, 0d3EC71DEE62401315;
	fma.rn.f64 	%fd112, %fd110, %fd107, %fd111;
	mov.f64 	%fd113, 0d3EFA01997C89EB71;
	fma.rn.f64 	%fd114, %fd112, %fd107, %fd113;
	mov.f64 	%fd115, 0d3F2A01A014761F65;
	fma.rn.f64 	%fd116, %fd114, %fd107, %fd115;
	mov.f64 	%fd117, 0d3F56C16C1852B7AF;
	fma.rn.f64 	%fd118, %fd116, %fd107, %fd117;
	mov.f64 	%fd119, 0d3F81111111122322;
	fma.rn.f64 	%fd120, %fd118, %fd107, %fd119;
	mov.f64 	%fd121, 0d3FA55555555502A1;
	fma.rn.f64 	%fd122, %fd120, %fd107, %fd121;
	mov.f64 	%fd123, 0d3FC5555555555511;
	fma.rn.f64 	%fd124, %fd122, %fd107, %fd123;
	mov.f64 	%fd125, 0d3FE000000000000B;
	fma.rn.f64 	%fd126, %fd124, %fd107, %fd125;
	fma.rn.f64 	%fd127, %fd126, %fd107, %fd18;
	fma.rn.f64 	%fd128, %fd127, %fd107, %fd18;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r14, %temp}, %fd128;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r15}, %fd128;
	}
	shl.b32 	%r33, %r13, 20;
	add.s32 	%r34, %r15, %r33;
	mov.b64 	%fd134, {%r14, %r34};
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r35}, %fd4;
	}
	mov.b32 	 %f2, %r35;
	abs.ftz.f32 	%f1, %f2;
	setp.lt.ftz.f32	%p4, %f1, 0f4086232B;
	@%p4 bra 	BB43_7;

	setp.lt.f64	%p5, %fd4, 0d0000000000000000;
	add.f64 	%fd129, %fd4, 0d7FF0000000000000;
	selp.f64	%fd134, 0d0000000000000000, %fd129, %p5;
	setp.geu.ftz.f32	%p6, %f1, 0f40874800;
	@%p6 bra 	BB43_7;

	shr.u32 	%r36, %r13, 31;
	add.s32 	%r37, %r13, %r36;
	shr.s32 	%r38, %r37, 1;
	shl.b32 	%r39, %r38, 20;
	add.s32 	%r40, %r39, %r15;
	mov.b64 	%fd130, {%r14, %r40};
	sub.s32 	%r41, %r13, %r38;
	shl.b32 	%r42, %r41, 20;
	add.s32 	%r43, %r42, 1072693248;
	mov.u32 	%r44, 0;
	mov.b64 	%fd131, {%r44, %r43};
	mul.f64 	%fd134, %fd130, %fd131;

BB43_7:
	abs.f64 	%fd132, %fd134;
	setp.eq.f64	%p7, %fd132, 0d7FF0000000000000;
	@%p7 bra 	BB43_9;

	fma.rn.f64 	%fd134, %fd134, %fd5, %fd134;

BB43_9:
	st.param.f64	[func_retval0+0], %fd134;
	ret;
}


