//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21373419
// Cuda compilation tools, release 8.0, V8.0.55
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_20
.address_size 64

	// .globl	fill
.global .align 4 .f32 epsilon = 0f3A83126F;
.global .align 4 .f32 SharedMemorySize = 0f463D1000;
.extern .shared .align 4 .b8 shared[];

.visible .entry fill(
	.param .u64 fill_param_0,
	.param .f32 fill_param_1,
	.param .u32 fill_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [fill_param_0];
	ld.param.f32 	%f1, [fill_param_1];
	ld.param.u32 	%r2, [fill_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	st.global.f32 	[%rd4], %f1;

BB0_2:
	ret;
}

	// .globl	gelu
.visible .entry gelu(
	.param .u64 gelu_param_0,
	.param .u64 gelu_param_1,
	.param .u32 gelu_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<40>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [gelu_param_0];
	ld.param.u64 	%rd3, [gelu_param_1];
	ld.param.u32 	%r2, [gelu_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB1_5;

	cvta.to.global.u64 	%rd4, %rd2;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	mul.ftz.f32 	%f7, %f1, %f1;
	mul.ftz.f32 	%f8, %f1, %f7;
	mul.ftz.f32 	%f9, %f8, 0f3D122277;
	fma.rn.ftz.f32 	%f2, %f1, 0f3F4C422A, %f9;
	abs.ftz.f32 	%f3, %f2;
	setp.ltu.ftz.f32	%p2, %f3, 0f3F0CCCCD;
	@%p2 bra 	BB1_3;
	bra.uni 	BB1_2;

BB1_3:
	mul.ftz.f32 	%f25, %f2, %f2;
	mov.f32 	%f26, 0fBD57BE66;
	mov.f32 	%f27, 0f3C86A81B;
	fma.rn.ftz.f32 	%f28, %f27, %f25, %f26;
	mov.f32 	%f29, 0f3E08677B;
	fma.rn.ftz.f32 	%f30, %f28, %f25, %f29;
	mov.f32 	%f31, 0fBEAAAA29;
	fma.rn.ftz.f32 	%f32, %f30, %f25, %f31;
	mul.ftz.f32 	%f33, %f25, %f32;
	fma.rn.ftz.f32 	%f34, %f33, %f2, %f2;
	add.ftz.f32 	%f35, %f2, %f2;
	setp.eq.ftz.f32	%p4, %f2, 0f00000000;
	selp.f32	%f39, %f35, %f34, %p4;
	bra.uni 	BB1_4;

BB1_2:
	add.ftz.f32 	%f14, %f3, %f3;
	mul.ftz.f32 	%f15, %f14, 0f3FB8AA3B;
	cvt.rzi.ftz.f32.f32	%f16, %f15;
	mov.f32 	%f17, 0fBF317200;
	fma.rn.ftz.f32 	%f18, %f16, %f17, %f14;
	mov.f32 	%f19, 0fB5BFBE8E;
	fma.rn.ftz.f32 	%f20, %f16, %f19, %f18;
	mul.ftz.f32 	%f11, %f20, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f10,%f11;
	// inline asm
	ex2.approx.ftz.f32 	%f21, %f16;
	mov.f32 	%f22, 0f3F800000;
	fma.rn.ftz.f32 	%f13, %f10, %f21, %f22;
	// inline asm
	rcp.approx.ftz.f32 %f12,%f13;
	// inline asm
	mov.f32 	%f23, 0fC0000000;
	fma.rn.ftz.f32 	%f24, %f12, %f23, %f22;
	mov.b32 	 %r6, %f24;
	setp.ltu.ftz.f32	%p3, %f3, 0f42B00000;
	selp.b32	%r7, %r6, 1065353216, %p3;
	mov.b32 	 %r8, %f2;
	and.b32  	%r9, %r8, -2147483648;
	or.b32  	%r10, %r7, %r9;
	mov.b32 	 %f39, %r10;

BB1_4:
	cvta.to.global.u64 	%rd7, %rd3;
	mul.ftz.f32 	%f36, %f1, 0f3F000000;
	add.ftz.f32 	%f37, %f39, 0f3F800000;
	mul.ftz.f32 	%f38, %f36, %f37;
	shl.b64 	%rd8, %rd1, 2;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f38;

BB1_5:
	ret;
}

	// .globl	set
.visible .entry set(
	.param .u64 set_param_0,
	.param .u32 set_param_1,
	.param .f32 set_param_2
)
{
	.reg .f32 	%f<2>;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [set_param_0];
	ld.param.u32 	%r1, [set_param_1];
	ld.param.f32 	%f1, [set_param_2];
	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	st.global.f32 	[%rd4], %f1;
	ret;
}

	// .globl	multiplyIndex
.visible .entry multiplyIndex(
	.param .u64 multiplyIndex_param_0,
	.param .u32 multiplyIndex_param_1,
	.param .u32 multiplyIndex_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [multiplyIndex_param_0];
	ld.param.u32 	%r2, [multiplyIndex_param_1];
	ld.param.u32 	%r3, [multiplyIndex_param_2];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB3_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.lo.s32 	%r7, %r1, %r2;
	cvt.rn.f32.s32	%f1, %r7;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	st.global.f32 	[%rd4], %f1;

BB3_2:
	ret;
}

	// .globl	imageVector
.visible .entry imageVector(
	.param .u64 imageVector_param_0,
	.param .u64 imageVector_param_1,
	.param .u32 imageVector_param_2,
	.param .u32 imageVector_param_3,
	.param .u32 imageVector_param_4,
	.param .u32 imageVector_param_5
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<55>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd9, [imageVector_param_0];
	ld.param.u64 	%rd10, [imageVector_param_1];
	ld.param.u32 	%r20, [imageVector_param_2];
	ld.param.u32 	%r17, [imageVector_param_3];
	ld.param.u32 	%r18, [imageVector_param_4];
	ld.param.u32 	%r19, [imageVector_param_5];
	mov.u32 	%r21, %ctaid.x;
	mov.u32 	%r22, %ntid.x;
	mov.u32 	%r23, %tid.x;
	mad.lo.s32 	%r24, %r21, %r22, %r23;
	mul.lo.s32 	%r1, %r24, %r19;
	mov.u32 	%r2, %ctaid.y;
	mov.u32 	%r3, %ntid.y;
	mov.u32 	%r4, %tid.y;
	mad.lo.s32 	%r25, %r2, %r3, %r4;
	mul.lo.s32 	%r5, %r25, %r19;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r27, %ntid.z;
	mov.u32 	%r28, %tid.z;
	mad.lo.s32 	%r6, %r26, %r27, %r28;
	setp.lt.s32	%p1, %r1, %r20;
	setp.lt.s32	%p2, %r5, %r17;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32	%p4, %r6, %r19;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB4_7;
	bra.uni 	BB4_1;

BB4_1:
	mul.lo.s32 	%r29, %r19, %r18;
	mul.lo.s32 	%r30, %r29, %r19;
	mul.lo.s32 	%r31, %r30, %r17;
	div.s32 	%r32, %r31, %r19;
	mul.lo.s32 	%r33, %r6, %r29;
	div.s32 	%r34, %r5, %r19;
	mad.lo.s32 	%r35, %r34, %r30, %r33;
	div.s32 	%r36, %r1, %r19;
	mad.lo.s32 	%r54, %r36, %r32, %r35;
	setp.lt.s32	%p6, %r19, 1;
	@%p6 bra 	BB4_7;

	cvta.to.global.u64 	%rd1, %rd10;
	cvta.to.global.u64 	%rd2, %rd9;
	mad.lo.s32 	%r46, %r19, %r24, %r6;
	mul.lo.s32 	%r48, %r19, %r25;
	mad.lo.s32 	%r49, %r17, %r46, %r48;
	mul.lo.s32 	%r8, %r18, %r49;
	mov.u32 	%r52, 0;

BB4_3:
	setp.lt.s32	%p7, %r18, 1;
	@%p7 bra 	BB4_6;

	mad.lo.s32 	%r51, %r18, %r52, %r8;
	mul.wide.s32 	%rd11, %r51, 4;
	add.s64 	%rd14, %rd2, %rd11;
	mul.wide.s32 	%rd12, %r54, 4;
	add.s64 	%rd13, %rd1, %rd12;
	mov.u32 	%r53, 0;

BB4_5:
	ld.global.f32 	%f1, [%rd14];
	st.global.f32 	[%rd13], %f1;
	add.s32 	%r54, %r54, 1;
	add.s64 	%rd14, %rd14, 4;
	add.s64 	%rd13, %rd13, 4;
	add.s32 	%r53, %r53, 1;
	setp.lt.s32	%p8, %r53, %r18;
	@%p8 bra 	BB4_5;

BB4_6:
	add.s32 	%r52, %r52, 1;
	setp.lt.s32	%p9, %r52, %r19;
	@%p9 bra 	BB4_3;

BB4_7:
	ret;
}

	// .globl	imageVector_half
.visible .entry imageVector_half(
	.param .u64 imageVector_half_param_0,
	.param .u64 imageVector_half_param_1,
	.param .u32 imageVector_half_param_2,
	.param .u32 imageVector_half_param_3,
	.param .u32 imageVector_half_param_4,
	.param .u32 imageVector_half_param_5
)
{
	.reg .pred 	%p<10>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<55>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd9, [imageVector_half_param_0];
	ld.param.u64 	%rd10, [imageVector_half_param_1];
	ld.param.u32 	%r20, [imageVector_half_param_2];
	ld.param.u32 	%r17, [imageVector_half_param_3];
	ld.param.u32 	%r18, [imageVector_half_param_4];
	ld.param.u32 	%r19, [imageVector_half_param_5];
	mov.u32 	%r21, %ctaid.x;
	mov.u32 	%r22, %ntid.x;
	mov.u32 	%r23, %tid.x;
	mad.lo.s32 	%r24, %r21, %r22, %r23;
	mul.lo.s32 	%r1, %r24, %r19;
	mov.u32 	%r2, %ctaid.y;
	mov.u32 	%r3, %ntid.y;
	mov.u32 	%r4, %tid.y;
	mad.lo.s32 	%r25, %r2, %r3, %r4;
	mul.lo.s32 	%r5, %r25, %r19;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r27, %ntid.z;
	mov.u32 	%r28, %tid.z;
	mad.lo.s32 	%r6, %r26, %r27, %r28;
	setp.lt.s32	%p1, %r1, %r20;
	setp.lt.s32	%p2, %r5, %r17;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32	%p4, %r6, %r19;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB5_7;
	bra.uni 	BB5_1;

BB5_1:
	mul.lo.s32 	%r29, %r19, %r18;
	mul.lo.s32 	%r30, %r29, %r19;
	mul.lo.s32 	%r31, %r30, %r17;
	div.s32 	%r32, %r31, %r19;
	mul.lo.s32 	%r33, %r6, %r29;
	div.s32 	%r34, %r5, %r19;
	mad.lo.s32 	%r35, %r34, %r30, %r33;
	div.s32 	%r36, %r1, %r19;
	mad.lo.s32 	%r54, %r36, %r32, %r35;
	setp.lt.s32	%p6, %r19, 1;
	@%p6 bra 	BB5_7;

	cvta.to.global.u64 	%rd1, %rd10;
	cvta.to.global.u64 	%rd2, %rd9;
	mad.lo.s32 	%r46, %r19, %r24, %r6;
	mul.lo.s32 	%r48, %r19, %r25;
	mad.lo.s32 	%r49, %r17, %r46, %r48;
	mul.lo.s32 	%r8, %r18, %r49;
	mov.u32 	%r52, 0;

BB5_3:
	setp.lt.s32	%p7, %r18, 1;
	@%p7 bra 	BB5_6;

	mad.lo.s32 	%r51, %r18, %r52, %r8;
	mul.wide.s32 	%rd11, %r51, 2;
	add.s64 	%rd14, %rd2, %rd11;
	mul.wide.s32 	%rd12, %r54, 2;
	add.s64 	%rd13, %rd1, %rd12;
	mov.u32 	%r53, 0;

BB5_5:
	ld.global.u16 	%rs1, [%rd14];
	st.global.u16 	[%rd13], %rs1;
	add.s32 	%r54, %r54, 1;
	add.s64 	%rd14, %rd14, 2;
	add.s64 	%rd13, %rd13, 2;
	add.s32 	%r53, %r53, 1;
	setp.lt.s32	%p8, %r53, %r18;
	@%p8 bra 	BB5_5;

BB5_6:
	add.s32 	%r52, %r52, 1;
	setp.lt.s32	%p9, %r52, %r19;
	@%p9 bra 	BB5_3;

BB5_7:
	ret;
}

	// .globl	backImageVector
.visible .entry backImageVector(
	.param .u64 backImageVector_param_0,
	.param .u64 backImageVector_param_1,
	.param .u32 backImageVector_param_2,
	.param .u32 backImageVector_param_3,
	.param .u32 backImageVector_param_4,
	.param .u32 backImageVector_param_5
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<55>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd9, [backImageVector_param_0];
	ld.param.u64 	%rd10, [backImageVector_param_1];
	ld.param.u32 	%r20, [backImageVector_param_2];
	ld.param.u32 	%r17, [backImageVector_param_3];
	ld.param.u32 	%r18, [backImageVector_param_4];
	ld.param.u32 	%r19, [backImageVector_param_5];
	mov.u32 	%r21, %ctaid.x;
	mov.u32 	%r22, %ntid.x;
	mov.u32 	%r23, %tid.x;
	mad.lo.s32 	%r24, %r21, %r22, %r23;
	mul.lo.s32 	%r1, %r24, %r19;
	mov.u32 	%r2, %ctaid.y;
	mov.u32 	%r3, %ntid.y;
	mov.u32 	%r4, %tid.y;
	mad.lo.s32 	%r25, %r2, %r3, %r4;
	mul.lo.s32 	%r5, %r25, %r19;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r27, %ntid.z;
	mov.u32 	%r28, %tid.z;
	mad.lo.s32 	%r6, %r26, %r27, %r28;
	setp.lt.s32	%p1, %r1, %r20;
	setp.lt.s32	%p2, %r5, %r17;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32	%p4, %r6, %r19;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB6_7;
	bra.uni 	BB6_1;

BB6_1:
	mul.lo.s32 	%r29, %r19, %r18;
	mul.lo.s32 	%r30, %r29, %r19;
	mul.lo.s32 	%r31, %r30, %r17;
	div.s32 	%r32, %r31, %r19;
	mul.lo.s32 	%r33, %r6, %r29;
	div.s32 	%r34, %r5, %r19;
	mad.lo.s32 	%r35, %r34, %r30, %r33;
	div.s32 	%r36, %r1, %r19;
	mad.lo.s32 	%r54, %r36, %r32, %r35;
	setp.lt.s32	%p6, %r19, 1;
	@%p6 bra 	BB6_7;

	cvta.to.global.u64 	%rd1, %rd10;
	cvta.to.global.u64 	%rd2, %rd9;
	mad.lo.s32 	%r46, %r19, %r24, %r6;
	mul.lo.s32 	%r48, %r19, %r25;
	mad.lo.s32 	%r49, %r17, %r46, %r48;
	mul.lo.s32 	%r8, %r18, %r49;
	mov.u32 	%r52, 0;

BB6_3:
	setp.lt.s32	%p7, %r18, 1;
	@%p7 bra 	BB6_6;

	mad.lo.s32 	%r51, %r18, %r52, %r8;
	mul.wide.s32 	%rd11, %r51, 4;
	add.s64 	%rd14, %rd1, %rd11;
	mul.wide.s32 	%rd12, %r54, 4;
	add.s64 	%rd13, %rd2, %rd12;
	mov.u32 	%r53, 0;

BB6_5:
	ld.global.f32 	%f1, [%rd13];
	st.global.f32 	[%rd14], %f1;
	add.s32 	%r54, %r54, 1;
	add.s64 	%rd14, %rd14, 4;
	add.s64 	%rd13, %rd13, 4;
	add.s32 	%r53, %r53, 1;
	setp.lt.s32	%p8, %r53, %r18;
	@%p8 bra 	BB6_5;

BB6_6:
	add.s32 	%r52, %r52, 1;
	setp.lt.s32	%p9, %r52, %r19;
	@%p9 bra 	BB6_3;

BB6_7:
	ret;
}

	// .globl	add3
.visible .entry add3(
	.param .u64 add3_param_0,
	.param .u64 add3_param_1,
	.param .u32 add3_param_2,
	.param .u32 add3_param_3
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<11>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd5, [add3_param_0];
	ld.param.u64 	%rd6, [add3_param_1];
	ld.param.u32 	%r4, [add3_param_2];
	ld.param.u32 	%r5, [add3_param_3];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r2, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r3, %r9, %r2, %r10;
	setp.lt.s32	%p1, %r1, %r4;
	setp.lt.s32	%p2, %r3, %r5;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB7_6;
	bra.uni 	BB7_1;

BB7_1:
	cvta.to.global.u64 	%rd7, %rd5;
	cvt.rn.f32.s32	%f1, %r3;
	ldu.global.f32 	%f2, [SharedMemorySize];
	mul.wide.s32 	%rd8, %r3, 4;
	add.s64 	%rd1, %rd7, %rd8;
	mov.u64 	%rd9, shared;
	add.s64 	%rd2, %rd9, %rd8;
	setp.geu.ftz.f32	%p4, %f1, %f2;
	@%p4 bra 	BB7_3;

	ld.global.f32 	%f3, [%rd1];
	st.shared.f32 	[%rd2], %f3;

BB7_3:
	cvta.to.global.u64 	%rd3, %rd6;
	bar.sync 	0;
	mov.u32 	%r11, %nctaid.y;
	mul.lo.s32 	%r12, %r1, %r2;
	mad.lo.s32 	%r13, %r12, %r11, %r3;
	ldu.global.f32 	%f4, [SharedMemorySize];
	setp.lt.ftz.f32	%p5, %f1, %f4;
	mul.wide.s32 	%rd10, %r13, 4;
	add.s64 	%rd4, %rd3, %rd10;
	@%p5 bra 	BB7_5;
	bra.uni 	BB7_4;

BB7_5:
	ld.shared.f32 	%f8, [%rd2];
	ld.global.f32 	%f9, [%rd4];
	add.ftz.f32 	%f10, %f8, %f9;
	st.global.f32 	[%rd4], %f10;
	bra.uni 	BB7_6;

BB7_4:
	ld.global.f32 	%f5, [%rd1];
	ld.global.f32 	%f6, [%rd4];
	add.ftz.f32 	%f7, %f5, %f6;
	st.global.f32 	[%rd4], %f7;

BB7_6:
	ret;
}

	// .globl	dot_VectorAndMatrix
.visible .entry dot_VectorAndMatrix(
	.param .u64 dot_VectorAndMatrix_param_0,
	.param .u64 dot_VectorAndMatrix_param_1,
	.param .u64 dot_VectorAndMatrix_param_2,
	.param .u32 dot_VectorAndMatrix_param_3,
	.param .u32 dot_VectorAndMatrix_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<17>;


	ld.param.u64 	%rd7, [dot_VectorAndMatrix_param_0];
	ld.param.u64 	%rd8, [dot_VectorAndMatrix_param_1];
	ld.param.u64 	%rd9, [dot_VectorAndMatrix_param_2];
	ld.param.u32 	%r8, [dot_VectorAndMatrix_param_3];
	ld.param.u32 	%r7, [dot_VectorAndMatrix_param_4];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r4, %r8;
	@%p1 bra 	BB8_5;

	mov.f32 	%f8, 0f00000000;
	setp.lt.s32	%p2, %r7, 1;
	@%p2 bra 	BB8_4;

	cvta.to.global.u64 	%rd10, %rd7;
	cvta.to.global.u64 	%rd16, %rd8;
	mul.lo.s32 	%r11, %r7, %r4;
	mul.wide.s32 	%rd11, %r11, 4;
	add.s64 	%rd15, %rd10, %rd11;
	mov.f32 	%f8, 0f00000000;
	mov.u32 	%r12, 0;

BB8_3:
	ld.global.f32 	%f6, [%rd15];
	ld.global.f32 	%f7, [%rd16];
	fma.rn.ftz.f32 	%f8, %f7, %f6, %f8;
	add.s64 	%rd16, %rd16, 4;
	add.s64 	%rd15, %rd15, 4;
	add.s32 	%r12, %r12, 1;
	setp.lt.s32	%p3, %r12, %r7;
	@%p3 bra 	BB8_3;

BB8_4:
	cvta.to.global.u64 	%rd12, %rd9;
	mul.wide.s32 	%rd13, %r4, 4;
	add.s64 	%rd14, %rd12, %rd13;
	st.global.f32 	[%rd14], %f8;

BB8_5:
	ret;
}

	// .globl	dotT_VectorAndMatrix
.visible .entry dotT_VectorAndMatrix(
	.param .u64 dotT_VectorAndMatrix_param_0,
	.param .u64 dotT_VectorAndMatrix_param_1,
	.param .u64 dotT_VectorAndMatrix_param_2,
	.param .u32 dotT_VectorAndMatrix_param_3,
	.param .u32 dotT_VectorAndMatrix_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<11>;
	.reg .b32 	%r<16>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd5, [dotT_VectorAndMatrix_param_0];
	ld.param.u64 	%rd6, [dotT_VectorAndMatrix_param_1];
	ld.param.u64 	%rd7, [dotT_VectorAndMatrix_param_2];
	ld.param.u32 	%r10, [dotT_VectorAndMatrix_param_3];
	ld.param.u32 	%r11, [dotT_VectorAndMatrix_param_4];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r4, %r11;
	@%p1 bra 	BB9_5;

	mov.f32 	%f10, 0f00000000;
	setp.lt.s32	%p2, %r10, 1;
	@%p2 bra 	BB9_4;

	cvta.to.global.u64 	%rd1, %rd6;
	cvta.to.global.u64 	%rd13, %rd5;
	mov.f32 	%f10, 0f00000000;
	mov.u32 	%r15, 0;
	mov.u32 	%r14, %r4;

BB9_3:
	mov.u32 	%r6, %r14;
	cvt.rn.f32.s32	%f6, %r6;
	cvt.rmi.ftz.f32.f32	%f7, %f6;
	cvt.rzi.ftz.s32.f32	%r13, %f7;
	mul.wide.s32 	%rd8, %r13, 4;
	add.s64 	%rd9, %rd1, %rd8;
	ld.global.f32 	%f8, [%rd9];
	ld.global.f32 	%f9, [%rd13];
	fma.rn.ftz.f32 	%f10, %f9, %f8, %f10;
	add.s32 	%r8, %r6, %r11;
	add.s64 	%rd13, %rd13, 4;
	add.s32 	%r15, %r15, 1;
	setp.lt.s32	%p3, %r15, %r10;
	mov.u32 	%r14, %r8;
	@%p3 bra 	BB9_3;

BB9_4:
	cvta.to.global.u64 	%rd10, %rd7;
	mul.wide.s32 	%rd11, %r4, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f10;

BB9_5:
	ret;
}

	// .globl	derivativeWeight
.visible .entry derivativeWeight(
	.param .u64 derivativeWeight_param_0,
	.param .u64 derivativeWeight_param_1,
	.param .u64 derivativeWeight_param_2,
	.param .u32 derivativeWeight_param_3,
	.param .u32 derivativeWeight_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [derivativeWeight_param_0];
	ld.param.u64 	%rd2, [derivativeWeight_param_1];
	ld.param.u64 	%rd3, [derivativeWeight_param_2];
	ld.param.u32 	%r3, [derivativeWeight_param_3];
	ld.param.u32 	%r2, [derivativeWeight_param_4];
	mov.u32 	%r4, %tid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mad.lo.s32 	%r1, %r5, %r6, %r4;
	mul.lo.s32 	%r7, %r2, %r3;
	setp.ge.u32	%p1, %r1, %r7;
	@%p1 bra 	BB10_2;

	cvta.to.global.u64 	%rd4, %rd2;
	div.u32 	%r8, %r1, %r2;
	mul.wide.u32 	%rd5, %r8, 4;
	add.s64 	%rd6, %rd4, %rd5;
	rem.u32 	%r9, %r1, %r2;
	cvta.to.global.u64 	%rd7, %rd1;
	mul.wide.u32 	%rd8, %r9, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	ld.global.f32 	%f2, [%rd6];
	cvta.to.global.u64 	%rd10, %rd3;
	mul.wide.u32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.f32 	%f3, [%rd12];
	fma.rn.ftz.f32 	%f4, %f2, %f1, %f3;
	st.global.f32 	[%rd12], %f4;

BB10_2:
	ret;
}

	// .globl	findMean_part
.visible .entry findMean_part(
	.param .u64 findMean_part_param_0,
	.param .u64 findMean_part_param_1,
	.param .u32 findMean_part_param_2,
	.param .u32 findMean_part_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd4, [findMean_part_param_0];
	ld.param.u64 	%rd5, [findMean_part_param_1];
	ld.param.u32 	%r8, [findMean_part_param_2];
	ld.param.u32 	%r7, [findMean_part_param_3];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r4, %r8;
	@%p1 bra 	BB11_5;

	mov.f32 	%f7, 0f00000000;
	setp.lt.s32	%p2, %r7, 1;
	@%p2 bra 	BB11_4;

	cvta.to.global.u64 	%rd6, %rd4;
	mul.lo.s32 	%r11, %r7, %r4;
	mul.wide.s32 	%rd7, %r11, 4;
	add.s64 	%rd11, %rd6, %rd7;
	mov.f32 	%f7, 0f00000000;
	mov.u32 	%r12, 0;

BB11_3:
	ld.global.f32 	%f6, [%rd11];
	add.ftz.f32 	%f7, %f7, %f6;
	add.s64 	%rd11, %rd11, 4;
	add.s32 	%r12, %r12, 1;
	setp.lt.s32	%p3, %r12, %r7;
	@%p3 bra 	BB11_3;

BB11_4:
	cvta.to.global.u64 	%rd8, %rd5;
	mul.wide.s32 	%rd9, %r4, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.f32 	[%rd10], %f7;

BB11_5:
	ret;
}

	// .globl	generateErrorNorm
.visible .entry generateErrorNorm(
	.param .u64 generateErrorNorm_param_0,
	.param .u64 generateErrorNorm_param_1,
	.param .u64 generateErrorNorm_param_2,
	.param .u32 generateErrorNorm_param_3,
	.param .u32 generateErrorNorm_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [generateErrorNorm_param_0];
	ld.param.u64 	%rd2, [generateErrorNorm_param_1];
	ld.param.u64 	%rd3, [generateErrorNorm_param_2];
	ld.param.u32 	%r3, [generateErrorNorm_param_3];
	ld.param.u32 	%r4, [generateErrorNorm_param_4];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r8, %r6, %r5, %r7;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %tid.y;
	mad.lo.s32 	%r1, %r9, %r10, %r11;
	mul.lo.s32 	%r12, %r8, %r10;
	mov.u32 	%r13, %nctaid.y;
	mad.lo.s32 	%r2, %r12, %r13, %r1;
	mul.lo.s32 	%r14, %r4, %r3;
	setp.ge.s32	%p1, %r2, %r14;
	@%p1 bra 	BB12_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r2, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.s32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	ld.global.f32 	%f2, [%rd6];
	mul.ftz.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd10, %rd3;
	add.s64 	%rd11, %rd10, %rd5;
	st.global.f32 	[%rd11], %f3;

BB12_2:
	ret;
}

	// .globl	derVar_part_2
.visible .entry derVar_part_2(
	.param .u64 derVar_part_2_param_0,
	.param .u64 derVar_part_2_param_1,
	.param .u64 derVar_part_2_param_2,
	.param .u64 derVar_part_2_param_3,
	.param .u32 derVar_part_2_param_4,
	.param .u32 derVar_part_2_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<11>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<23>;


	ld.param.u64 	%rd8, [derVar_part_2_param_0];
	ld.param.u64 	%rd9, [derVar_part_2_param_1];
	ld.param.u64 	%rd10, [derVar_part_2_param_2];
	ld.param.u64 	%rd11, [derVar_part_2_param_3];
	ld.param.u32 	%r8, [derVar_part_2_param_4];
	ld.param.u32 	%r7, [derVar_part_2_param_5];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r4, %r8;
	@%p1 bra 	BB13_5;

	cvt.s64.s32	%rd1, %r4;
	mov.f32 	%f10, 0f00000000;
	setp.lt.s32	%p2, %r7, 1;
	@%p2 bra 	BB13_4;

	cvta.to.global.u64 	%rd12, %rd9;
	cvta.to.global.u64 	%rd13, %rd8;
	cvta.to.global.u64 	%rd14, %rd10;
	shl.b64 	%rd15, %rd1, 2;
	add.s64 	%rd16, %rd14, %rd15;
	ld.global.f32 	%f1, [%rd16];
	mul.lo.s32 	%r11, %r7, %r4;
	mul.wide.s32 	%rd17, %r11, 4;
	add.s64 	%rd22, %rd12, %rd17;
	add.s64 	%rd21, %rd13, %rd17;
	mov.f32 	%f10, 0f00000000;
	mov.u32 	%r12, 0;

BB13_3:
	ld.global.f32 	%f7, [%rd22];
	sub.ftz.f32 	%f8, %f7, %f1;
	ld.global.f32 	%f9, [%rd21];
	fma.rn.ftz.f32 	%f10, %f9, %f8, %f10;
	add.s64 	%rd22, %rd22, 4;
	add.s64 	%rd21, %rd21, 4;
	add.s32 	%r12, %r12, 1;
	setp.lt.s32	%p3, %r12, %r7;
	@%p3 bra 	BB13_3;

BB13_4:
	cvta.to.global.u64 	%rd18, %rd11;
	shl.b64 	%rd19, %rd1, 2;
	add.s64 	%rd20, %rd18, %rd19;
	st.global.f32 	[%rd20], %f10;

BB13_5:
	ret;
}

	// .globl	derMean_part_2
.visible .entry derMean_part_2(
	.param .u64 derMean_part_2_param_0,
	.param .u64 derMean_part_2_param_1,
	.param .u64 derMean_part_2_param_2,
	.param .u64 derMean_part_2_param_3,
	.param .u64 derMean_part_2_param_4,
	.param .u32 derMean_part_2_param_5,
	.param .u32 derMean_part_2_param_6
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<17>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<26>;


	ld.param.u64 	%rd8, [derMean_part_2_param_0];
	ld.param.u64 	%rd9, [derMean_part_2_param_1];
	ld.param.u64 	%rd10, [derMean_part_2_param_2];
	ld.param.u64 	%rd11, [derMean_part_2_param_3];
	ld.param.u64 	%rd12, [derMean_part_2_param_4];
	ld.param.u32 	%r8, [derMean_part_2_param_5];
	ld.param.u32 	%r7, [derMean_part_2_param_6];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r4, %r8;
	@%p1 bra 	BB14_5;

	cvt.s64.s32	%rd1, %r4;
	mov.f32 	%f16, 0f00000000;
	mov.f32 	%f15, %f16;
	setp.lt.s32	%p2, %r7, 1;
	@%p2 bra 	BB14_4;

	cvta.to.global.u64 	%rd13, %rd9;
	cvta.to.global.u64 	%rd14, %rd8;
	cvta.to.global.u64 	%rd15, %rd10;
	shl.b64 	%rd16, %rd1, 2;
	add.s64 	%rd17, %rd15, %rd16;
	ld.global.f32 	%f1, [%rd17];
	mul.lo.s32 	%r11, %r7, %r4;
	mul.wide.s32 	%rd18, %r11, 4;
	add.s64 	%rd25, %rd13, %rd18;
	add.s64 	%rd24, %rd14, %rd18;
	mov.f32 	%f16, 0f00000000;
	mov.f32 	%f15, %f16;
	mov.u32 	%r12, 0;

BB14_3:
	ld.global.f32 	%f12, [%rd24];
	add.ftz.f32 	%f16, %f16, %f12;
	ld.global.f32 	%f13, [%rd25];
	sub.ftz.f32 	%f14, %f13, %f1;
	add.ftz.f32 	%f15, %f15, %f14;
	add.s64 	%rd25, %rd25, 4;
	add.s64 	%rd24, %rd24, 4;
	add.s32 	%r12, %r12, 1;
	setp.lt.s32	%p3, %r12, %r7;
	@%p3 bra 	BB14_3;

BB14_4:
	cvta.to.global.u64 	%rd19, %rd12;
	cvta.to.global.u64 	%rd20, %rd11;
	shl.b64 	%rd21, %rd1, 2;
	add.s64 	%rd22, %rd20, %rd21;
	st.global.f32 	[%rd22], %f16;
	add.s64 	%rd23, %rd19, %rd21;
	st.global.f32 	[%rd23], %f15;

BB14_5:
	ret;
}

	// .globl	derNorm_part_2
.visible .entry derNorm_part_2(
	.param .u64 derNorm_part_2_param_0,
	.param .u64 derNorm_part_2_param_1,
	.param .u64 derNorm_part_2_param_2,
	.param .u64 derNorm_part_2_param_3,
	.param .u64 derNorm_part_2_param_4,
	.param .u64 derNorm_part_2_param_5,
	.param .u64 derNorm_part_2_param_6,
	.param .u32 derNorm_part_2_param_7,
	.param .u32 derNorm_part_2_param_8
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<11>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<24>;


	ld.param.u64 	%rd1, [derNorm_part_2_param_0];
	ld.param.u64 	%rd2, [derNorm_part_2_param_1];
	ld.param.u64 	%rd3, [derNorm_part_2_param_2];
	ld.param.u64 	%rd4, [derNorm_part_2_param_3];
	ld.param.u64 	%rd5, [derNorm_part_2_param_4];
	ld.param.u64 	%rd6, [derNorm_part_2_param_5];
	ld.param.u64 	%rd7, [derNorm_part_2_param_6];
	ld.param.u32 	%r3, [derNorm_part_2_param_7];
	ld.param.u32 	%r4, [derNorm_part_2_param_8];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %nctaid.y;
	mov.u32 	%r9, %ctaid.y;
	mad.lo.s32 	%r10, %r8, %r1, %r9;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	mul.lo.s32 	%r13, %r4, %r3;
	setp.ge.s32	%p1, %r2, %r13;
	@%p1 bra 	BB15_2;

	cvta.to.global.u64 	%rd8, %rd1;
	mul.wide.s32 	%rd9, %r2, 4;
	add.s64 	%rd10, %rd8, %rd9;
	cvta.to.global.u64 	%rd11, %rd2;
	mul.wide.s32 	%rd12, %r1, 4;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.f32 	%f1, [%rd13];
	ld.global.f32 	%f2, [%rd10];
	cvta.to.global.u64 	%rd14, %rd3;
	add.s64 	%rd15, %rd14, %rd12;
	cvta.to.global.u64 	%rd16, %rd4;
	add.s64 	%rd17, %rd16, %rd9;
	cvta.to.global.u64 	%rd18, %rd5;
	add.s64 	%rd19, %rd18, %rd12;
	ld.global.f32 	%f3, [%rd19];
	ld.global.f32 	%f4, [%rd17];
	sub.ftz.f32 	%f5, %f4, %f3;
	ld.global.f32 	%f6, [%rd15];
	mul.ftz.f32 	%f7, %f6, %f5;
	fma.rn.ftz.f32 	%f8, %f2, %f1, %f7;
	cvta.to.global.u64 	%rd20, %rd6;
	add.s64 	%rd21, %rd20, %rd12;
	ld.global.f32 	%f9, [%rd21];
	add.ftz.f32 	%f10, %f9, %f8;
	cvta.to.global.u64 	%rd22, %rd7;
	add.s64 	%rd23, %rd22, %rd9;
	st.global.f32 	[%rd23], %f10;

BB15_2:
	ret;
}

	// .globl	derivativeWeight_2
.visible .entry derivativeWeight_2(
	.param .u64 derivativeWeight_2_param_0,
	.param .u64 derivativeWeight_2_param_1,
	.param .u64 derivativeWeight_2_param_2,
	.param .u64 derivativeWeight_2_param_3,
	.param .u64 derivativeWeight_2_param_4,
	.param .u64 derivativeWeight_2_param_5,
	.param .u32 derivativeWeight_2_param_6,
	.param .u32 derivativeWeight_2_param_7
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<19>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<23>;


	ld.param.u64 	%rd6, [derivativeWeight_2_param_0];
	ld.param.u64 	%rd7, [derivativeWeight_2_param_1];
	ld.param.u64 	%rd8, [derivativeWeight_2_param_2];
	ld.param.u64 	%rd9, [derivativeWeight_2_param_3];
	ld.param.u64 	%rd10, [derivativeWeight_2_param_4];
	ld.param.u64 	%rd11, [derivativeWeight_2_param_5];
	ld.param.u32 	%r9, [derivativeWeight_2_param_6];
	ld.param.u32 	%r10, [derivativeWeight_2_param_7];
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r15, %r11, %r1, %r2;
	setp.ge.s32	%p1, %r15, %r10;
	@%p1 bra 	BB16_5;

	cvta.to.global.u64 	%rd12, %rd10;
	cvt.s64.s32	%rd1, %r15;
	mul.wide.s32 	%rd13, %r15, 4;
	add.s64 	%rd2, %rd12, %rd13;
	ld.global.f32 	%f18, [%rd2];
	cvta.to.global.u64 	%rd14, %rd11;
	add.s64 	%rd3, %rd14, %rd13;
	ld.global.f32 	%f17, [%rd3];
	setp.lt.s32	%p2, %r9, 1;
	@%p2 bra 	BB16_4;

	cvta.to.global.u64 	%rd4, %rd7;
	cvta.to.global.u64 	%rd5, %rd6;
	cvta.to.global.u64 	%rd15, %rd9;
	shl.b64 	%rd16, %rd1, 2;
	add.s64 	%rd17, %rd15, %rd16;
	ld.global.f32 	%f3, [%rd17];
	cvta.to.global.u64 	%rd18, %rd8;
	add.s64 	%rd19, %rd18, %rd16;
	ld.global.f32 	%f4, [%rd19];
	mov.u32 	%r16, 0;

BB16_3:
	cvt.rn.f32.s32	%f11, %r15;
	cvt.rmi.ftz.f32.f32	%f12, %f11;
	cvt.rzi.ftz.s32.f32	%r14, %f12;
	mul.wide.s32 	%rd20, %r14, 4;
	add.s64 	%rd21, %rd5, %rd20;
	ld.global.f32 	%f13, [%rd21];
	add.ftz.f32 	%f18, %f18, %f13;
	add.s64 	%rd22, %rd4, %rd20;
	ld.global.f32 	%f14, [%rd22];
	sub.ftz.f32 	%f15, %f14, %f4;
	div.approx.ftz.f32 	%f16, %f15, %f3;
	fma.rn.ftz.f32 	%f17, %f13, %f16, %f17;
	add.s32 	%r15, %r15, %r10;
	add.s32 	%r16, %r16, 1;
	setp.lt.s32	%p3, %r16, %r9;
	@%p3 bra 	BB16_3;

BB16_4:
	st.global.f32 	[%rd2], %f18;
	st.global.f32 	[%rd3], %f17;

BB16_5:
	ret;
}

	// .globl	findVariance_part
.visible .entry findVariance_part(
	.param .u64 findVariance_part_param_0,
	.param .u64 findVariance_part_param_1,
	.param .u64 findVariance_part_param_2,
	.param .u32 findVariance_part_param_3,
	.param .u32 findVariance_part_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<10>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<17>;


	ld.param.u64 	%rd5, [findVariance_part_param_0];
	ld.param.u64 	%rd6, [findVariance_part_param_1];
	ld.param.u64 	%rd7, [findVariance_part_param_2];
	ld.param.u32 	%r8, [findVariance_part_param_3];
	ld.param.u32 	%r7, [findVariance_part_param_4];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r4, %r8;
	@%p1 bra 	BB17_5;

	cvt.s64.s32	%rd1, %r4;
	mov.f32 	%f9, 0f00000000;
	setp.lt.s32	%p2, %r7, 1;
	@%p2 bra 	BB17_4;

	cvta.to.global.u64 	%rd8, %rd5;
	cvta.to.global.u64 	%rd9, %rd6;
	shl.b64 	%rd10, %rd1, 2;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f32 	%f1, [%rd11];
	mul.lo.s32 	%r11, %r7, %r4;
	mul.wide.s32 	%rd12, %r11, 4;
	add.s64 	%rd16, %rd8, %rd12;
	mov.f32 	%f9, 0f00000000;
	mov.u32 	%r12, 0;

BB17_3:
	ld.global.f32 	%f7, [%rd16];
	sub.ftz.f32 	%f8, %f7, %f1;
	fma.rn.ftz.f32 	%f9, %f8, %f8, %f9;
	add.s64 	%rd16, %rd16, 4;
	add.s32 	%r12, %r12, 1;
	setp.lt.s32	%p3, %r12, %r7;
	@%p3 bra 	BB17_3;

BB17_4:
	cvta.to.global.u64 	%rd13, %rd7;
	shl.b64 	%rd14, %rd1, 2;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.f32 	[%rd15], %f9;

BB17_5:
	ret;
}

	// .globl	normalization_part_2
.visible .entry normalization_part_2(
	.param .u64 normalization_part_2_param_0,
	.param .u64 normalization_part_2_param_1,
	.param .u64 normalization_part_2_param_2,
	.param .u64 normalization_part_2_param_3,
	.param .u64 normalization_part_2_param_4,
	.param .u64 normalization_part_2_param_5,
	.param .u64 normalization_part_2_param_6,
	.param .u32 normalization_part_2_param_7,
	.param .u32 normalization_part_2_param_8
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<25>;


	ld.param.u64 	%rd1, [normalization_part_2_param_0];
	ld.param.u64 	%rd2, [normalization_part_2_param_1];
	ld.param.u64 	%rd3, [normalization_part_2_param_2];
	ld.param.u64 	%rd4, [normalization_part_2_param_3];
	ld.param.u64 	%rd5, [normalization_part_2_param_4];
	ld.param.u64 	%rd6, [normalization_part_2_param_5];
	ld.param.u64 	%rd7, [normalization_part_2_param_6];
	ld.param.u32 	%r4, [normalization_part_2_param_7];
	ld.param.u32 	%r5, [normalization_part_2_param_8];
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r7, %r6, %r8;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r2, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r3, %r9, %r2, %r10;
	setp.lt.s32	%p1, %r1, %r4;
	setp.lt.s32	%p2, %r3, %r5;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB18_2;
	bra.uni 	BB18_1;

BB18_1:
	cvta.to.global.u64 	%rd8, %rd1;
	mov.u32 	%r11, %nctaid.y;
	mul.lo.s32 	%r12, %r1, %r2;
	mad.lo.s32 	%r13, %r12, %r11, %r3;
	mul.wide.s32 	%rd9, %r13, 4;
	add.s64 	%rd10, %rd8, %rd9;
	cvta.to.global.u64 	%rd11, %rd2;
	mul.wide.s32 	%rd12, %r1, 4;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.f32 	%f1, [%rd13];
	ld.global.f32 	%f2, [%rd10];
	sub.ftz.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd14, %rd3;
	add.s64 	%rd15, %rd14, %rd12;
	ld.global.f32 	%f4, [%rd15];
	div.approx.ftz.f32 	%f5, %f3, %f4;
	cvta.to.global.u64 	%rd16, %rd5;
	mul.wide.s32 	%rd17, %r3, 4;
	add.s64 	%rd18, %rd16, %rd17;
	ld.global.f32 	%f6, [%rd18];
	cvta.to.global.u64 	%rd19, %rd6;
	add.s64 	%rd20, %rd19, %rd17;
	ld.global.f32 	%f7, [%rd20];
	fma.rn.ftz.f32 	%f8, %f5, %f6, %f7;
	cvta.to.global.u64 	%rd21, %rd7;
	add.s64 	%rd22, %rd21, %rd9;
	st.global.f32 	[%rd22], %f8;
	cvta.to.global.u64 	%rd23, %rd4;
	add.s64 	%rd24, %rd23, %rd9;
	st.global.f32 	[%rd24], %f5;

BB18_2:
	ret;
}

	// .globl	add_NNMatrix
.visible .entry add_NNMatrix(
	.param .u64 add_NNMatrix_param_0,
	.param .u64 add_NNMatrix_param_1,
	.param .u32 add_NNMatrix_param_2,
	.param .u32 add_NNMatrix_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<16>;
	.reg .f64 	%fd<7>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [add_NNMatrix_param_0];
	ld.param.u64 	%rd4, [add_NNMatrix_param_1];
	ld.param.u32 	%r10, [add_NNMatrix_param_2];
	ld.param.u32 	%r11, [add_NNMatrix_param_3];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r14, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r14, %r11;
	@%p1 bra 	BB19_5;

	cvta.to.global.u64 	%rd5, %rd4;
	mul.wide.s32 	%rd6, %r14, 4;
	add.s64 	%rd1, %rd5, %rd6;
	ld.global.f32 	%f1, [%rd1];
	cvt.ftz.f64.f32	%fd6, %f1;
	setp.lt.s32	%p2, %r10, 1;
	@%p2 bra 	BB19_4;

	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r15, 0;

BB19_3:
	cvt.rn.f32.s32	%f2, %r14;
	cvt.rmi.ftz.f32.f32	%f3, %f2;
	cvt.rzi.ftz.s32.f32	%r13, %f3;
	mul.wide.s32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.f32 	%f4, [%rd8];
	cvt.ftz.f64.f32	%fd5, %f4;
	add.f64 	%fd6, %fd6, %fd5;
	add.s32 	%r14, %r14, %r11;
	add.s32 	%r15, %r15, 1;
	setp.lt.s32	%p3, %r15, %r10;
	@%p3 bra 	BB19_3;

BB19_4:
	cvt.rn.ftz.f32.f64	%f5, %fd6;
	st.global.f32 	[%rd1], %f5;

BB19_5:
	ret;
}

	// .globl	reverse
.visible .entry reverse(
	.param .u64 reverse_param_0,
	.param .u32 reverse_param_1,
	.param .u32 reverse_param_2,
	.param .u32 reverse_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<28>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd1, [reverse_param_0];
	ld.param.u32 	%r4, [reverse_param_1];
	ld.param.u32 	%r5, [reverse_param_2];
	ld.param.u32 	%r6, [reverse_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ctaid.y;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	mov.u32 	%r13, %ctaid.z;
	mov.u32 	%r14, %ntid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r13, %r14, %r15;
	mul.lo.s32 	%r16, %r1, %r11;
	mov.u32 	%r17, %nctaid.y;
	mad.lo.s32 	%r18, %r16, %r17, %r2;
	mul.lo.s32 	%r19, %r5, %r4;
	setp.lt.s32	%p1, %r18, %r19;
	setp.lt.s32	%p2, %r3, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB20_2;
	bra.uni 	BB20_1;

BB20_1:
	cvta.to.global.u64 	%rd2, %rd1;
	add.s32 	%r20, %r4, -1;
	sub.s32 	%r21, %r20, %r1;
	mul.lo.s32 	%r22, %r6, %r5;
	mul.lo.s32 	%r23, %r2, %r6;
	mad.lo.s32 	%r24, %r22, %r1, %r23;
	add.s32 	%r25, %r24, %r3;
	mul.wide.s32 	%rd3, %r25, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f1, [%rd4];
	mad.lo.s32 	%r26, %r22, %r21, %r23;
	add.s32 	%r27, %r26, %r3;
	mul.wide.s32 	%rd5, %r27, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.f32 	%f2, [%rd6];
	st.global.f32 	[%rd4], %f1;
	st.global.f32 	[%rd6], %f2;

BB20_2:
	ret;
}

	// .globl	set2
.visible .entry set2(
	.param .u64 set2_param_0,
	.param .u32 set2_param_1,
	.param .u32 set2_param_2,
	.param .u32 set2_param_3,
	.param .u32 set2_param_4,
	.param .u32 set2_param_5,
	.param .f32 set2_param_6
)
{
	.reg .f32 	%f<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [set2_param_0];
	ld.param.u32 	%r1, [set2_param_1];
	ld.param.u32 	%r2, [set2_param_2];
	ld.param.u32 	%r3, [set2_param_3];
	ld.param.u32 	%r4, [set2_param_4];
	ld.param.u32 	%r5, [set2_param_5];
	ld.param.f32 	%f1, [set2_param_6];
	cvta.to.global.u64 	%rd2, %rd1;
	mad.lo.s32 	%r6, %r4, %r1, %r2;
	mad.lo.s32 	%r7, %r6, %r5, %r3;
	mul.wide.s32 	%rd3, %r7, 4;
	add.s64 	%rd4, %rd2, %rd3;
	st.global.f32 	[%rd4], %f1;
	ret;
}

	// .globl	MatAdd
.visible .entry MatAdd(
	.param .u64 MatAdd_param_0,
	.param .u64 MatAdd_param_1,
	.param .u32 MatAdd_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [MatAdd_param_0];
	ld.param.u64 	%rd2, [MatAdd_param_1];
	ld.param.u32 	%r2, [MatAdd_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB22_2;

	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	add.s64 	%rd7, %rd3, %rd5;
	ld.global.f32 	%f1, [%rd7];
	atom.global.add.f32 	%f2, [%rd6], %f1;

BB22_2:
	ret;
}

	// .globl	matrixDiv
.visible .entry matrixDiv(
	.param .u64 matrixDiv_param_0,
	.param .f32 matrixDiv_param_1,
	.param .u32 matrixDiv_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [matrixDiv_param_0];
	ld.param.f32 	%f1, [matrixDiv_param_1];
	ld.param.u32 	%r2, [matrixDiv_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB23_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f2, [%rd4];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd4], %f3;

BB23_2:
	ret;
}

	// .globl	vectorScalarSet
.visible .entry vectorScalarSet(
	.param .u64 vectorScalarSet_param_0,
	.param .f32 vectorScalarSet_param_1,
	.param .u32 vectorScalarSet_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [vectorScalarSet_param_0];
	ld.param.f32 	%f1, [vectorScalarSet_param_1];
	ld.param.u32 	%r2, [vectorScalarSet_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB24_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	st.global.f32 	[%rd4], %f1;

BB24_2:
	ret;
}

	// .globl	addCopy
.visible .entry addCopy(
	.param .u64 addCopy_param_0,
	.param .u64 addCopy_param_1,
	.param .u32 addCopy_param_2,
	.param .u32 addCopy_param_3,
	.param .u32 addCopy_param_4,
	.param .u32 addCopy_param_5
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<20>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [addCopy_param_0];
	ld.param.u64 	%rd2, [addCopy_param_1];
	ld.param.u32 	%r7, [addCopy_param_2];
	ld.param.u32 	%r4, [addCopy_param_3];
	ld.param.u32 	%r5, [addCopy_param_4];
	ld.param.u32 	%r6, [addCopy_param_5];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r9, %r8, %r10;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %ntid.y;
	mov.u32 	%r13, %tid.y;
	mad.lo.s32 	%r2, %r11, %r12, %r13;
	mul.lo.s32 	%r14, %r1, %r12;
	mov.u32 	%r15, %nctaid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r2;
	mul.lo.s32 	%r16, %r5, %r7;
	setp.ge.s32	%p1, %r3, %r16;
	@%p1 bra 	BB25_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.lo.s32 	%r17, %r6, %r5;
	mad.lo.s32 	%r18, %r1, %r4, %r17;
	add.s32 	%r19, %r18, %r2;
	mul.wide.s32 	%rd4, %r3, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB25_2:
	ret;
}

	// .globl	normalization_part_1
.visible .entry normalization_part_1(
	.param .u64 normalization_part_1_param_0,
	.param .u64 normalization_part_1_param_1,
	.param .u32 normalization_part_1_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [normalization_part_1_param_0];
	ld.param.u64 	%rd2, [normalization_part_1_param_1];
	ld.param.u32 	%r2, [normalization_part_1_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB26_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	add.ftz.f32 	%f2, %f1, 0f3A83126F;
	sqrt.approx.ftz.f32 	%f3, %f2;
	cvta.to.global.u64 	%rd6, %rd1;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f3;

BB26_2:
	ret;
}

	// .globl	NormalizationLayerForward2D
.visible .entry NormalizationLayerForward2D(
	.param .u64 NormalizationLayerForward2D_param_0,
	.param .u64 NormalizationLayerForward2D_param_1,
	.param .u64 NormalizationLayerForward2D_param_2,
	.param .u32 NormalizationLayerForward2D_param_3,
	.param .u32 NormalizationLayerForward2D_param_4,
	.param .u32 NormalizationLayerForward2D_param_5
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<24>;
	.reg .b32 	%r<30>;
	.reg .b64 	%rd<76>;


	ld.param.u64 	%rd21, [NormalizationLayerForward2D_param_0];
	ld.param.u64 	%rd22, [NormalizationLayerForward2D_param_1];
	ld.param.u64 	%rd23, [NormalizationLayerForward2D_param_2];
	ld.param.u32 	%r13, [NormalizationLayerForward2D_param_3];
	ld.param.u32 	%r12, [NormalizationLayerForward2D_param_4];
	ld.param.u32 	%r14, [NormalizationLayerForward2D_param_5];
	mov.u32 	%r15, %ctaid.x;
	mov.u32 	%r16, %ntid.x;
	mov.u32 	%r17, %tid.x;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	mov.u32 	%r2, %ctaid.y;
	mov.u32 	%r3, %ntid.y;
	mov.u32 	%r4, %tid.y;
	mad.lo.s32 	%r5, %r2, %r3, %r4;
	setp.lt.s32	%p1, %r1, %r14;
	setp.lt.s32	%p2, %r5, %r13;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB27_10;
	bra.uni 	BB27_1;

BB27_1:
	cvta.to.global.u64 	%rd1, %rd21;
	ldu.global.u64 	%rd24, [%rd1+24];
	cvta.to.global.u64 	%rd25, %rd24;
	cvt.s64.s32	%rd2, %r1;
	mul.wide.s32 	%rd26, %r1, 8;
	add.s64 	%rd27, %rd25, %rd26;
	ld.global.u64 	%rd28, [%rd27];
	cvta.to.global.u64 	%rd29, %rd28;
	cvt.s64.s32	%rd3, %r5;
	mul.wide.s32 	%rd30, %r5, 4;
	add.s64 	%rd4, %rd29, %rd30;
	ld.global.f32 	%f22, [%rd4];
	setp.lt.s32	%p4, %r12, 1;
	@%p4 bra 	BB27_4;

	ldu.global.u64 	%rd31, [%rd1+16];
	cvta.to.global.u64 	%rd32, %rd31;
	shl.b64 	%rd33, %rd2, 3;
	add.s64 	%rd34, %rd32, %rd33;
	ld.global.u64 	%rd35, [%rd34];
	cvta.to.global.u64 	%rd36, %rd35;
	mul.lo.s32 	%r20, %r12, %r5;
	mul.wide.s32 	%rd37, %r20, 4;
	add.s64 	%rd71, %rd36, %rd37;
	mov.u32 	%r27, 0;

BB27_3:
	ld.global.f32 	%f11, [%rd71];
	add.ftz.f32 	%f22, %f22, %f11;
	add.s64 	%rd71, %rd71, 4;
	add.s32 	%r27, %r27, 1;
	setp.lt.s32	%p5, %r27, %r12;
	@%p5 bra 	BB27_3;

BB27_4:
	st.global.f32 	[%rd4], %f22;
	ld.global.u64 	%rd38, [%rd1+32];
	cvta.to.global.u64 	%rd39, %rd38;
	shl.b64 	%rd40, %rd2, 3;
	add.s64 	%rd41, %rd39, %rd40;
	ld.global.u64 	%rd42, [%rd41];
	cvta.to.global.u64 	%rd43, %rd42;
	shl.b64 	%rd44, %rd3, 2;
	add.s64 	%rd8, %rd43, %rd44;
	ld.global.f32 	%f23, [%rd8];
	@%p4 bra 	BB27_7;

	ld.global.u64 	%rd45, [%rd1+16];
	cvta.to.global.u64 	%rd46, %rd45;
	add.s64 	%rd48, %rd46, %rd40;
	ld.global.u64 	%rd49, [%rd48];
	cvta.to.global.u64 	%rd50, %rd49;
	mul.lo.s32 	%r23, %r12, %r5;
	mul.wide.s32 	%rd51, %r23, 4;
	add.s64 	%rd72, %rd50, %rd51;
	mov.u32 	%r28, 0;

BB27_6:
	ld.global.f32 	%f12, [%rd72];
	sub.ftz.f32 	%f13, %f12, %f22;
	fma.rn.ftz.f32 	%f23, %f13, %f13, %f23;
	add.s64 	%rd72, %rd72, 4;
	add.s32 	%r28, %r28, 1;
	setp.lt.s32	%p7, %r28, %r12;
	@%p7 bra 	BB27_6;

BB27_7:
	cvt.rn.f32.s32	%f14, %r12;
	div.approx.ftz.f32 	%f9, %f23, %f14;
	st.global.f32 	[%rd8], %f9;
	@%p4 bra 	BB27_10;

	cvta.to.global.u64 	%rd75, %rd23;
	cvta.to.global.u64 	%rd74, %rd22;
	add.ftz.f32 	%f15, %f9, 0f3A83126F;
	sqrt.approx.ftz.f32 	%f10, %f15;
	mul.lo.s32 	%r26, %r12, %r5;
	mul.wide.s32 	%rd73, %r26, 4;
	mov.u32 	%r29, 0;

BB27_9:
	ld.global.u64 	%rd52, [%rd1+16];
	cvta.to.global.u64 	%rd53, %rd52;
	add.s64 	%rd55, %rd53, %rd40;
	ld.global.u64 	%rd56, [%rd55];
	cvta.to.global.u64 	%rd57, %rd56;
	add.s64 	%rd58, %rd57, %rd73;
	ld.global.f32 	%f16, [%rd58];
	sub.ftz.f32 	%f17, %f16, %f22;
	div.approx.ftz.f32 	%f18, %f17, %f10;
	ld.global.u64 	%rd59, [%rd1];
	cvta.to.global.u64 	%rd60, %rd59;
	add.s64 	%rd61, %rd60, %rd40;
	ld.global.u64 	%rd62, [%rd61];
	cvta.to.global.u64 	%rd63, %rd62;
	add.s64 	%rd64, %rd63, %rd73;
	st.global.f32 	[%rd64], %f18;
	ld.global.f32 	%f19, [%rd74];
	ld.global.f32 	%f20, [%rd75];
	fma.rn.ftz.f32 	%f21, %f18, %f19, %f20;
	ld.global.u64 	%rd65, [%rd1+8];
	cvta.to.global.u64 	%rd66, %rd65;
	add.s64 	%rd67, %rd66, %rd40;
	ld.global.u64 	%rd68, [%rd67];
	cvta.to.global.u64 	%rd69, %rd68;
	add.s64 	%rd70, %rd69, %rd73;
	st.global.f32 	[%rd70], %f21;
	add.s64 	%rd75, %rd75, 4;
	add.s64 	%rd74, %rd74, 4;
	add.s64 	%rd73, %rd73, 4;
	add.s32 	%r29, %r29, 1;
	setp.lt.s32	%p9, %r29, %r12;
	@%p9 bra 	BB27_9;

BB27_10:
	ret;
}

	// .globl	DenseLayerForward
.visible .entry DenseLayerForward(
	.param .u64 DenseLayerForward_param_0,
	.param .u64 DenseLayerForward_param_1,
	.param .u64 DenseLayerForward_param_2,
	.param .u32 DenseLayerForward_param_3,
	.param .u32 DenseLayerForward_param_4,
	.param .u32 DenseLayerForward_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<10>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<63>;


	ld.param.u64 	%rd12, [DenseLayerForward_param_0];
	ld.param.u64 	%rd13, [DenseLayerForward_param_1];
	ld.param.u64 	%rd14, [DenseLayerForward_param_2];
	ld.param.u32 	%r9, [DenseLayerForward_param_3];
	ld.param.u32 	%r8, [DenseLayerForward_param_4];
	ld.param.u32 	%r10, [DenseLayerForward_param_5];
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r1, %r11, %r12, %r13;
	mov.u32 	%r2, %ctaid.y;
	mov.u32 	%r3, %ntid.y;
	mov.u32 	%r4, %tid.y;
	mad.lo.s32 	%r5, %r2, %r3, %r4;
	setp.lt.s32	%p1, %r1, %r10;
	setp.lt.s32	%p2, %r5, %r9;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB28_6;
	bra.uni 	BB28_1;

BB28_1:
	cvta.to.global.u64 	%rd1, %rd12;
	ldu.global.u64 	%rd15, [%rd1+8];
	cvta.to.global.u64 	%rd16, %rd15;
	cvt.s64.s32	%rd2, %r1;
	mul.wide.s32 	%rd17, %r1, 8;
	add.s64 	%rd18, %rd16, %rd17;
	ld.global.u64 	%rd61, [%rd18];
	cvta.to.global.u64 	%rd19, %rd61;
	cvt.s64.s32	%rd4, %r5;
	mul.wide.s32 	%rd20, %r5, 4;
	add.s64 	%rd21, %rd19, %rd20;
	ld.global.f32 	%f1, [%rd21];
	setp.lt.s32	%p4, %r8, 1;
	@%p4 bra 	BB28_5;

	cvta.to.global.u64 	%rd23, %rd13;
	mul.lo.s32 	%r16, %r8, %r5;
	mul.wide.s32 	%rd24, %r16, 4;
	add.s64 	%rd5, %rd23, %rd24;
	mov.u32 	%r17, 1;
	mov.u64 	%rd59, 0;
	mov.f32 	%f9, %f1;
	mov.u64 	%rd62, %rd61;
	bra.uni 	BB28_3;

BB28_7:
	ld.global.u64 	%rd52, [%rd1+8];
	cvta.to.global.u64 	%rd53, %rd52;
	add.s64 	%rd55, %rd53, %rd27;
	ld.global.u64 	%rd62, [%rd55];
	cvta.to.global.u64 	%rd56, %rd62;
	add.s64 	%rd58, %rd56, %rd34;
	ld.global.f32 	%f3, [%rd58];
	add.s32 	%r17, %r17, 1;
	add.s64 	%rd59, %rd59, 4;
	mov.f32 	%f9, %f3;

BB28_3:
	mov.u64 	%rd7, %rd62;
	mov.f32 	%f2, %f9;
	ld.global.u64 	%rd25, [%rd1];
	cvta.to.global.u64 	%rd26, %rd25;
	shl.b64 	%rd27, %rd2, 3;
	add.s64 	%rd28, %rd26, %rd27;
	ld.global.u64 	%rd29, [%rd28];
	cvta.to.global.u64 	%rd30, %rd29;
	add.s64 	%rd31, %rd30, %rd59;
	add.s64 	%rd32, %rd5, %rd59;
	ld.global.f32 	%f4, [%rd32];
	ld.global.f32 	%f5, [%rd31];
	cvta.to.global.u64 	%rd33, %rd7;
	shl.b64 	%rd34, %rd4, 2;
	add.s64 	%rd35, %rd33, %rd34;
	fma.rn.ftz.f32 	%f6, %f5, %f4, %f2;
	st.global.f32 	[%rd35], %f6;
	setp.lt.s32	%p5, %r17, %r8;
	@%p5 bra 	BB28_7;

	ld.global.u64 	%rd36, [%rd1+8];
	cvta.to.global.u64 	%rd37, %rd36;
	add.s64 	%rd39, %rd37, %rd27;
	ld.global.u64 	%rd61, [%rd39];

BB28_5:
	cvta.to.global.u64 	%rd40, %rd14;
	cvta.to.global.u64 	%rd41, %rd61;
	shl.b64 	%rd42, %rd4, 2;
	add.s64 	%rd43, %rd41, %rd42;
	st.global.f32 	[%rd43], %f1;
	ld.global.u64 	%rd44, [%rd1+8];
	cvta.to.global.u64 	%rd45, %rd44;
	shl.b64 	%rd46, %rd2, 3;
	add.s64 	%rd47, %rd45, %rd46;
	ld.global.u64 	%rd48, [%rd47];
	cvta.to.global.u64 	%rd49, %rd48;
	add.s64 	%rd50, %rd49, %rd42;
	add.s64 	%rd51, %rd40, %rd42;
	ld.global.f32 	%f7, [%rd51];
	atom.global.add.f32 	%f8, [%rd50], %f7;

BB28_6:
	ret;
}

	// .globl	dot
.visible .entry dot(
	.param .u64 dot_param_0,
	.param .u64 dot_param_1,
	.param .u64 dot_param_2,
	.param .u32 dot_param_3,
	.param .u32 dot_param_4,
	.param .u32 dot_param_5,
	.param .u32 dot_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<20>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd3, [dot_param_0];
	ld.param.u64 	%rd4, [dot_param_1];
	ld.param.u64 	%rd5, [dot_param_2];
	ld.param.u32 	%r8, [dot_param_3];
	ld.param.u32 	%r6, [dot_param_4];
	ld.param.u32 	%r7, [dot_param_6];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r1, %r9, %r10, %r11;
	mov.u32 	%r12, %ctaid.y;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r2, %r12, %r13, %r14;
	setp.lt.s32	%p1, %r1, %r8;
	setp.lt.s32	%p2, %r2, %r7;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB29_5;
	bra.uni 	BB29_1;

BB29_1:
	mov.f32 	%f8, 0f00000000;
	setp.lt.s32	%p4, %r6, 1;
	@%p4 bra 	BB29_4;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mul.lo.s32 	%r3, %r1, %r6;
	mov.f32 	%f8, 0f00000000;
	mov.u32 	%r19, 0;

BB29_3:
	add.s32 	%r16, %r19, %r3;
	mul.wide.s32 	%rd6, %r16, 4;
	add.s64 	%rd7, %rd2, %rd6;
	mad.lo.s32 	%r17, %r19, %r7, %r2;
	mul.wide.s32 	%rd8, %r17, 4;
	add.s64 	%rd9, %rd1, %rd8;
	ld.global.f32 	%f6, [%rd9];
	ld.global.f32 	%f7, [%rd7];
	fma.rn.ftz.f32 	%f8, %f7, %f6, %f8;
	add.s32 	%r19, %r19, 1;
	setp.lt.s32	%p5, %r19, %r6;
	@%p5 bra 	BB29_3;

BB29_4:
	cvta.to.global.u64 	%rd10, %rd5;
	mad.lo.s32 	%r18, %r1, %r7, %r2;
	mul.wide.s32 	%rd11, %r18, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f8;

BB29_5:
	ret;
}

	// .globl	dropout
.visible .entry dropout(
	.param .u64 dropout_param_0,
	.param .u64 dropout_param_1,
	.param .f64 dropout_param_2,
	.param .u32 dropout_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<6>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [dropout_param_0];
	ld.param.u64 	%rd3, [dropout_param_1];
	ld.param.f64 	%fd1, [dropout_param_2];
	ld.param.u32 	%r2, [dropout_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB30_3;

	cvta.to.global.u64 	%rd4, %rd3;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	cvt.ftz.f64.f32	%fd2, %f1;
	setp.leu.f64	%p2, %fd2, %fd1;
	@%p2 bra 	BB30_3;

	cvta.to.global.u64 	%rd7, %rd2;
	mov.f64 	%fd3, 0d3FF0000000000000;
	sub.f64 	%fd4, %fd3, %fd1;
	rcp.rn.f64 	%fd5, %fd4;
	cvt.rn.ftz.f32.f64	%f2, %fd5;
	shl.b64 	%rd8, %rd1, 2;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f3, [%rd9];
	mul.ftz.f32 	%f4, %f3, %f2;
	st.global.f32 	[%rd9], %f4;

BB30_3:
	ret;
}

	// .globl	sub_gpu
.visible .entry sub_gpu(
	.param .u64 sub_gpu_param_0,
	.param .u64 sub_gpu_param_1,
	.param .u64 sub_gpu_param_2,
	.param .u32 sub_gpu_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [sub_gpu_param_0];
	ld.param.u64 	%rd2, [sub_gpu_param_1];
	ld.param.u64 	%rd3, [sub_gpu_param_2];
	ld.param.u32 	%r2, [sub_gpu_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB31_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f3;

BB31_2:
	ret;
}

	// .globl	mul
.visible .entry mul(
	.param .u64 mul_param_0,
	.param .f32 mul_param_1,
	.param .u32 mul_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [mul_param_0];
	ld.param.f32 	%f1, [mul_param_1];
	ld.param.u32 	%r2, [mul_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB32_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f2, [%rd4];
	mul.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd4], %f3;

BB32_2:
	ret;
}

	// .globl	indexMaxElement
.visible .entry indexMaxElement(
	.param .u64 indexMaxElement_param_0,
	.param .u64 indexMaxElement_param_1,
	.param .u64 indexMaxElement_param_2,
	.param .u32 indexMaxElement_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd2, [indexMaxElement_param_0];
	ld.param.u64 	%rd4, [indexMaxElement_param_1];
	ld.param.u64 	%rd3, [indexMaxElement_param_2];
	ld.param.u32 	%r2, [indexMaxElement_param_3];
	cvta.to.global.u64 	%rd1, %rd4;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB33_3;

	cvta.to.global.u64 	%rd5, %rd2;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ldu.global.f32 	%f2, [%rd1];
	ld.global.f32 	%f1, [%rd7];
	setp.leu.ftz.f32	%p2, %f1, %f2;
	@%p2 bra 	BB33_3;

	cvta.to.global.u64 	%rd8, %rd3;
	st.global.f32 	[%rd1], %f1;
	st.global.u32 	[%rd8], %r1;

BB33_3:
	ret;
}

	// .globl	derVar_part_1
.visible .entry derVar_part_1(
	.param .u64 derVar_part_1_param_0,
	.param .f32 derVar_part_1_param_1,
	.param .u64 derVar_part_1_param_2,
	.param .u32 derVar_part_1_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [derVar_part_1_param_0];
	ld.param.f32 	%f1, [derVar_part_1_param_1];
	ld.param.u64 	%rd2, [derVar_part_1_param_2];
	ld.param.u32 	%r2, [derVar_part_1_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB34_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	lg2.approx.ftz.f32 	%f4, %f3;
	mul.ftz.f32 	%f5, %f4, 0fBFC00000;
	ex2.approx.ftz.f32 	%f6, %f5;
	mul.ftz.f32 	%f7, %f6, 0fBF000000;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f7;

BB34_2:
	ret;
}

	// .globl	derVar_part_3
.visible .entry derVar_part_3(
	.param .u64 derVar_part_3_param_0,
	.param .u64 derVar_part_3_param_1,
	.param .u32 derVar_part_3_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [derVar_part_3_param_0];
	ld.param.u64 	%rd2, [derVar_part_3_param_1];
	ld.param.u32 	%r2, [derVar_part_3_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB35_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	ld.global.f32 	%f1, [%rd7];
	ld.global.f32 	%f2, [%rd5];
	mul.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd7], %f3;

BB35_2:
	ret;
}

	// .globl	derMean_part_1
.visible .entry derMean_part_1(
	.param .u64 derMean_part_1_param_0,
	.param .f32 derMean_part_1_param_1,
	.param .u64 derMean_part_1_param_2,
	.param .u32 derMean_part_1_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [derMean_part_1_param_0];
	ld.param.f32 	%f1, [derMean_part_1_param_1];
	ld.param.u64 	%rd2, [derMean_part_1_param_2];
	ld.param.u32 	%r2, [derMean_part_1_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB36_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	sqrt.approx.ftz.f32 	%f4, %f3;
	mov.f32 	%f5, 0fBF800000;
	div.approx.ftz.f32 	%f6, %f5, %f4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f6;

BB36_2:
	ret;
}

	// .globl	derMean_part_3
.visible .entry derMean_part_3(
	.param .u64 derMean_part_3_param_0,
	.param .u64 derMean_part_3_param_1,
	.param .u64 derMean_part_3_param_2,
	.param .u32 derMean_part_3_param_3,
	.param .u64 derMean_part_3_param_4,
	.param .u32 derMean_part_3_param_5
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<10>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd1, [derMean_part_3_param_0];
	ld.param.u64 	%rd2, [derMean_part_3_param_1];
	ld.param.u64 	%rd3, [derMean_part_3_param_2];
	ld.param.u32 	%r2, [derMean_part_3_param_3];
	ld.param.u64 	%rd4, [derMean_part_3_param_4];
	ld.param.u32 	%r3, [derMean_part_3_param_5];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB37_2;

	cvta.to.global.u64 	%rd5, %rd4;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	cvta.to.global.u64 	%rd8, %rd1;
	add.s64 	%rd9, %rd8, %rd6;
	ld.global.f32 	%f1, [%rd9];
	ld.global.f32 	%f2, [%rd7];
	cvta.to.global.u64 	%rd10, %rd2;
	add.s64 	%rd11, %rd10, %rd6;
	ld.global.f32 	%f3, [%rd11];
	mul.ftz.f32 	%f4, %f3, 0fC0000000;
	cvta.to.global.u64 	%rd12, %rd3;
	add.s64 	%rd13, %rd12, %rd6;
	ld.global.f32 	%f5, [%rd13];
	mul.ftz.f32 	%f6, %f4, %f5;
	cvt.rn.f32.s32	%f7, %r2;
	div.approx.ftz.f32 	%f8, %f6, %f7;
	fma.rn.ftz.f32 	%f9, %f2, %f1, %f8;
	st.global.f32 	[%rd7], %f9;

BB37_2:
	ret;
}

	// .globl	derNorm_part_1
.visible .entry derNorm_part_1(
	.param .u64 derNorm_part_1_param_0,
	.param .f32 derNorm_part_1_param_1,
	.param .u64 derNorm_part_1_param_2,
	.param .u32 derNorm_part_1_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [derNorm_part_1_param_0];
	ld.param.f32 	%f1, [derNorm_part_1_param_1];
	ld.param.u64 	%rd2, [derNorm_part_1_param_2];
	ld.param.u32 	%r2, [derNorm_part_1_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB38_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	rsqrt.approx.ftz.f32 	%f4, %f3;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f4;

BB38_2:
	ret;
}

	// .globl	pow2
.visible .entry pow2(
	.param .u64 pow2_param_0,
	.param .u32 pow2_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [pow2_param_0];
	ld.param.u32 	%r2, [pow2_param_1];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB39_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f1, [%rd4];
	mul.ftz.f32 	%f2, %f1, %f1;
	st.global.f32 	[%rd4], %f2;

BB39_2:
	ret;
}

	// .globl	sum
.visible .entry sum(
	.param .u64 sum_param_0,
	.param .u64 sum_param_1,
	.param .u32 sum_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd1, [sum_param_0];
	ld.param.u64 	%rd2, [sum_param_1];
	ld.param.u32 	%r2, [sum_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB40_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd2;
	atom.global.add.f32 	%f2, [%rd6], %f1;

BB40_2:
	ret;
}

	// .globl	isnan
.visible .entry isnan(
	.param .u64 isnan_param_0,
	.param .u64 isnan_param_1,
	.param .u32 isnan_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd2, [isnan_param_0];
	ld.param.u64 	%rd3, [isnan_param_1];
	ld.param.u32 	%r2, [isnan_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB41_4;

	ldu.global.u32 	%r6, [%rd1];
	setp.ne.s32	%p2, %r6, 0;
	@%p2 bra 	BB41_4;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	abs.ftz.f32 	%f2, %f1;
	setp.le.ftz.f32	%p3, %f2, 0f7F800000;
	@%p3 bra 	BB41_4;

	mov.u32 	%r7, 1;
	st.global.u32 	[%rd1], %r7;

BB41_4:
	ret;
}

	// .globl	divide_add
.visible .entry divide_add(
	.param .u64 divide_add_param_0,
	.param .u64 divide_add_param_1,
	.param .u32 divide_add_param_2
)
{
	.reg .f32 	%f<5>;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [divide_add_param_0];
	ld.param.u64 	%rd2, [divide_add_param_1];
	ld.param.u32 	%r1, [divide_add_param_2];
	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd4, %rd2;
	ldu.global.f32 	%f1, [%rd4];
	cvt.rn.f32.s32	%f2, %r1;
	div.approx.ftz.f32 	%f3, %f1, %f2;
	atom.global.add.f32 	%f4, [%rd3], %f3;
	ret;
}

	// .globl	momentum
.visible .entry momentum(
	.param .u64 momentum_param_0,
	.param .u64 momentum_param_1,
	.param .f32 momentum_param_2,
	.param .u32 momentum_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [momentum_param_0];
	ld.param.u64 	%rd2, [momentum_param_1];
	ld.param.f32 	%f1, [momentum_param_2];
	ld.param.u32 	%r2, [momentum_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB43_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	mov.f32 	%f3, 0f3F800000;
	sub.ftz.f32 	%f4, %f3, %f1;
	ld.global.f32 	%f5, [%rd7];
	mul.ftz.f32 	%f6, %f4, %f5;
	fma.rn.ftz.f32 	%f7, %f2, %f1, %f6;
	st.global.f32 	[%rd5], %f7;

BB43_2:
	ret;
}

	// .globl	momentumPow2
.visible .entry momentumPow2(
	.param .u64 momentumPow2_param_0,
	.param .u64 momentumPow2_param_1,
	.param .f32 momentumPow2_param_2,
	.param .u32 momentumPow2_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [momentumPow2_param_0];
	ld.param.u64 	%rd2, [momentumPow2_param_1];
	ld.param.f32 	%f1, [momentumPow2_param_2];
	ld.param.u32 	%r2, [momentumPow2_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB44_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	ld.global.f32 	%f3, [%rd7];
	mov.f32 	%f4, 0f3F800000;
	sub.ftz.f32 	%f5, %f4, %f1;
	mul.ftz.f32 	%f6, %f5, %f3;
	mul.ftz.f32 	%f7, %f3, %f6;
	fma.rn.ftz.f32 	%f8, %f2, %f1, %f7;
	st.global.f32 	[%rd5], %f8;

BB44_2:
	ret;
}

	// .globl	subDivSqrtNorm
.visible .entry subDivSqrtNorm(
	.param .u64 subDivSqrtNorm_param_0,
	.param .u64 subDivSqrtNorm_param_1,
	.param .f32 subDivSqrtNorm_param_2,
	.param .f32 subDivSqrtNorm_param_3,
	.param .f32 subDivSqrtNorm_param_4,
	.param .u64 subDivSqrtNorm_param_5,
	.param .u32 subDivSqrtNorm_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<15>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [subDivSqrtNorm_param_0];
	ld.param.u64 	%rd2, [subDivSqrtNorm_param_1];
	ld.param.f32 	%f1, [subDivSqrtNorm_param_2];
	ld.param.f32 	%f2, [subDivSqrtNorm_param_3];
	ld.param.f32 	%f3, [subDivSqrtNorm_param_4];
	ld.param.u64 	%rd3, [subDivSqrtNorm_param_5];
	ld.param.u32 	%r2, [subDivSqrtNorm_param_6];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB45_2;

	cvta.to.global.u64 	%rd4, %rd1;
	cvta.to.global.u64 	%rd5, %rd3;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	add.ftz.f32 	%f4, %f2, 0f33D6BF95;
	div.approx.ftz.f32 	%f5, %f1, %f4;
	add.s64 	%rd8, %rd4, %rd6;
	ld.global.f32 	%f6, [%rd8];
	mul.ftz.f32 	%f7, %f5, %f6;
	neg.ftz.f32 	%f8, %f7;
	cvta.to.global.u64 	%rd9, %rd2;
	add.s64 	%rd10, %rd9, %rd6;
	ld.global.f32 	%f9, [%rd10];
	div.approx.ftz.f32 	%f10, %f9, %f3;
	sqrt.approx.ftz.f32 	%f11, %f10;
	add.ftz.f32 	%f12, %f11, 0f33D6BF95;
	div.approx.ftz.f32 	%f13, %f8, %f12;
	atom.global.add.f32 	%f14, [%rd7], %f13;

BB45_2:
	ret;
}

	// .globl	addBackCopy
.visible .entry addBackCopy(
	.param .u64 addBackCopy_param_0,
	.param .u32 addBackCopy_param_1,
	.param .u32 addBackCopy_param_2,
	.param .u32 addBackCopy_param_3,
	.param .u32 addBackCopy_param_4,
	.param .u64 addBackCopy_param_5
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<20>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [addBackCopy_param_0];
	ld.param.u32 	%r4, [addBackCopy_param_1];
	ld.param.u32 	%r7, [addBackCopy_param_2];
	ld.param.u32 	%r5, [addBackCopy_param_3];
	ld.param.u32 	%r6, [addBackCopy_param_4];
	ld.param.u64 	%rd2, [addBackCopy_param_5];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r9, %r8, %r10;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %ctaid.y;
	mov.u32 	%r13, %tid.y;
	mad.lo.s32 	%r2, %r11, %r12, %r13;
	mul.lo.s32 	%r14, %r11, %r1;
	mov.u32 	%r15, %nctaid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r2;
	mul.lo.s32 	%r16, %r5, %r7;
	setp.ge.s32	%p1, %r3, %r16;
	@%p1 bra 	BB46_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.lo.s32 	%r17, %r6, %r5;
	mad.lo.s32 	%r18, %r1, %r4, %r17;
	add.s32 	%r19, %r18, %r2;
	mul.wide.s32 	%rd4, %r19, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB46_2:
	ret;
}

	// .globl	dropoutBack
.visible .entry dropoutBack(
	.param .u64 dropoutBack_param_0,
	.param .u64 dropoutBack_param_1,
	.param .f32 dropoutBack_param_2,
	.param .u64 dropoutBack_param_3,
	.param .u32 dropoutBack_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd2, [dropoutBack_param_0];
	ld.param.u64 	%rd3, [dropoutBack_param_1];
	ld.param.f32 	%f1, [dropoutBack_param_2];
	ld.param.u64 	%rd4, [dropoutBack_param_3];
	ld.param.u32 	%r2, [dropoutBack_param_4];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB47_3;

	cvta.to.global.u64 	%rd5, %rd2;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f32 	%f2, [%rd7];
	setp.eq.ftz.f32	%p2, %f2, 0f00000000;
	@%p2 bra 	BB47_3;

	cvta.to.global.u64 	%rd8, %rd4;
	cvta.to.global.u64 	%rd9, %rd3;
	shl.b64 	%rd10, %rd1, 2;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f32 	%f3, [%rd11];
	mul.ftz.f32 	%f4, %f3, %f1;
	add.s64 	%rd12, %rd8, %rd10;
	st.global.f32 	[%rd12], %f4;

BB47_3:
	ret;
}

	// .globl	mask
.visible .entry mask(
	.param .u64 mask_param_0,
	.param .f32 mask_param_1,
	.param .f32 mask_param_2,
	.param .u64 mask_param_3,
	.param .u32 mask_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [mask_param_0];
	ld.param.f32 	%f1, [mask_param_1];
	ld.param.f32 	%f2, [mask_param_2];
	ld.param.u64 	%rd3, [mask_param_3];
	ld.param.u32 	%r2, [mask_param_4];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB48_3;

	cvta.to.global.u64 	%rd4, %rd2;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f3, [%rd6];
	setp.neu.ftz.f32	%p2, %f3, %f1;
	@%p2 bra 	BB48_3;

	cvta.to.global.u64 	%rd7, %rd3;
	shl.b64 	%rd8, %rd1, 2;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f2;

BB48_3:
	ret;
}

	// .globl	fillUnderDiagonal
.visible .entry fillUnderDiagonal(
	.param .u32 fillUnderDiagonal_param_0,
	.param .f32 fillUnderDiagonal_param_1,
	.param .u64 fillUnderDiagonal_param_2,
	.param .u32 fillUnderDiagonal_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<8>;


	ld.param.u32 	%r7, [fillUnderDiagonal_param_0];
	ld.param.f32 	%f1, [fillUnderDiagonal_param_1];
	ld.param.u64 	%rd4, [fillUnderDiagonal_param_2];
	ld.param.u32 	%r8, [fillUnderDiagonal_param_3];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	setp.lt.s32	%p1, %r4, %r8;
	setp.gt.s32	%p2, %r4, -1;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB49_3;
	bra.uni 	BB49_1;

BB49_1:
	cvta.to.global.u64 	%rd5, %rd4;
	mul.lo.s32 	%r11, %r7, %r4;
	mul.wide.s32 	%rd6, %r11, 4;
	add.s64 	%rd7, %rd5, %rd6;
	mov.u32 	%r12, -1;

BB49_2:
	st.global.f32 	[%rd7], %f1;
	add.s64 	%rd7, %rd7, 4;
	add.s32 	%r12, %r12, 1;
	setp.lt.s32	%p4, %r12, %r4;
	@%p4 bra 	BB49_2;

BB49_3:
	ret;
}

	// .globl	derGelu
.visible .entry derGelu(
	.param .u64 derGelu_param_0,
	.param .u64 derGelu_param_1,
	.param .u64 derGelu_param_2,
	.param .u32 derGelu_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<48>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd2, [derGelu_param_0];
	ld.param.u64 	%rd3, [derGelu_param_1];
	ld.param.u64 	%rd4, [derGelu_param_2];
	ld.param.u32 	%r2, [derGelu_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB50_5;

	cvta.to.global.u64 	%rd5, %rd2;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f32 	%f1, [%rd7];
	mul.ftz.f32 	%f7, %f1, %f1;
	mul.ftz.f32 	%f8, %f1, %f7;
	mul.ftz.f32 	%f9, %f8, 0f3D122277;
	fma.rn.ftz.f32 	%f2, %f1, 0f3F4C422A, %f9;
	abs.ftz.f32 	%f3, %f2;
	setp.ltu.ftz.f32	%p2, %f3, 0f3F0CCCCD;
	@%p2 bra 	BB50_3;
	bra.uni 	BB50_2;

BB50_3:
	mul.ftz.f32 	%f25, %f2, %f2;
	mov.f32 	%f26, 0fBD57BE66;
	mov.f32 	%f27, 0f3C86A81B;
	fma.rn.ftz.f32 	%f28, %f27, %f25, %f26;
	mov.f32 	%f29, 0f3E08677B;
	fma.rn.ftz.f32 	%f30, %f28, %f25, %f29;
	mov.f32 	%f31, 0fBEAAAA29;
	fma.rn.ftz.f32 	%f32, %f30, %f25, %f31;
	mul.ftz.f32 	%f33, %f25, %f32;
	fma.rn.ftz.f32 	%f34, %f33, %f2, %f2;
	add.ftz.f32 	%f35, %f2, %f2;
	setp.eq.ftz.f32	%p4, %f2, 0f00000000;
	selp.f32	%f47, %f35, %f34, %p4;
	bra.uni 	BB50_4;

BB50_2:
	add.ftz.f32 	%f14, %f3, %f3;
	mul.ftz.f32 	%f15, %f14, 0f3FB8AA3B;
	cvt.rzi.ftz.f32.f32	%f16, %f15;
	mov.f32 	%f17, 0fBF317200;
	fma.rn.ftz.f32 	%f18, %f16, %f17, %f14;
	mov.f32 	%f19, 0fB5BFBE8E;
	fma.rn.ftz.f32 	%f20, %f16, %f19, %f18;
	mul.ftz.f32 	%f11, %f20, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f10,%f11;
	// inline asm
	ex2.approx.ftz.f32 	%f21, %f16;
	mov.f32 	%f22, 0f3F800000;
	fma.rn.ftz.f32 	%f13, %f10, %f21, %f22;
	// inline asm
	rcp.approx.ftz.f32 %f12,%f13;
	// inline asm
	mov.f32 	%f23, 0fC0000000;
	fma.rn.ftz.f32 	%f24, %f12, %f23, %f22;
	mov.b32 	 %r6, %f24;
	setp.ltu.ftz.f32	%p3, %f3, 0f42B00000;
	selp.b32	%r7, %r6, 1065353216, %p3;
	mov.b32 	 %r8, %f2;
	and.b32  	%r9, %r8, -2147483648;
	or.b32  	%r10, %r7, %r9;
	mov.b32 	 %f47, %r10;

BB50_4:
	cvta.to.global.u64 	%rd8, %rd3;
	cvta.to.global.u64 	%rd9, %rd4;
	shl.b64 	%rd10, %rd1, 2;
	add.s64 	%rd11, %rd8, %rd10;
	ld.global.f32 	%f36, [%rd11];
	mul.ftz.f32 	%f37, %f36, 0f3F000000;
	mul.ftz.f32 	%f38, %f47, %f47;
	mov.f32 	%f39, 0f3F800000;
	sub.ftz.f32 	%f40, %f39, %f38;
	mul.ftz.f32 	%f41, %f1, %f40;
	mul.ftz.f32 	%f42, %f1, 0f3DDB33B3;
	fma.rn.ftz.f32 	%f43, %f1, %f42, 0f3F4C426B;
	add.ftz.f32 	%f44, %f47, 0f3F800000;
	fma.rn.ftz.f32 	%f45, %f43, %f41, %f44;
	mul.ftz.f32 	%f46, %f37, %f45;
	add.s64 	%rd12, %rd9, %rd10;
	st.global.f32 	[%rd12], %f46;

BB50_5:
	ret;
}

	// .globl	matrixMultiplicationKernel
.visible .entry matrixMultiplicationKernel(
	.param .u64 matrixMultiplicationKernel_param_0,
	.param .u64 matrixMultiplicationKernel_param_1,
	.param .u64 matrixMultiplicationKernel_param_2,
	.param .u32 matrixMultiplicationKernel_param_3,
	.param .u32 matrixMultiplicationKernel_param_4,
	.param .u32 matrixMultiplicationKernel_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd3, [matrixMultiplicationKernel_param_0];
	ld.param.u64 	%rd4, [matrixMultiplicationKernel_param_1];
	ld.param.u64 	%rd5, [matrixMultiplicationKernel_param_2];
	ld.param.u32 	%r6, [matrixMultiplicationKernel_param_3];
	ld.param.u32 	%r8, [matrixMultiplicationKernel_param_4];
	ld.param.u32 	%r7, [matrixMultiplicationKernel_param_5];
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %ctaid.y;
	mov.u32 	%r11, %tid.y;
	mad.lo.s32 	%r1, %r9, %r10, %r11;
	mov.u32 	%r12, %ntid.x;
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r2, %r12, %r13, %r14;
	mul.lo.s32 	%r15, %r1, %r9;
	mov.u32 	%r16, %nctaid.y;
	mad.lo.s32 	%r17, %r15, %r16, %r2;
	mul.lo.s32 	%r18, %r7, %r8;
	setp.ge.s32	%p1, %r17, %r18;
	@%p1 bra 	BB51_5;

	mov.f32 	%f8, 0f00000000;
	setp.lt.s32	%p2, %r6, 1;
	@%p2 bra 	BB51_4;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mul.lo.s32 	%r3, %r1, %r6;
	mov.f32 	%f8, 0f00000000;
	mov.u32 	%r23, 0;

BB51_3:
	add.s32 	%r20, %r23, %r3;
	mul.wide.s32 	%rd6, %r20, 4;
	add.s64 	%rd7, %rd2, %rd6;
	mad.lo.s32 	%r21, %r23, %r7, %r2;
	mul.wide.s32 	%rd8, %r21, 4;
	add.s64 	%rd9, %rd1, %rd8;
	ld.global.f32 	%f6, [%rd9];
	ld.global.f32 	%f7, [%rd7];
	fma.rn.ftz.f32 	%f8, %f7, %f6, %f8;
	add.s32 	%r23, %r23, 1;
	setp.lt.s32	%p3, %r23, %r6;
	@%p3 bra 	BB51_3;

BB51_4:
	cvta.to.global.u64 	%rd10, %rd5;
	mad.lo.s32 	%r22, %r1, %r7, %r2;
	mul.wide.s32 	%rd11, %r22, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f8;

BB51_5:
	ret;
}

	// .globl	Softmax
.visible .entry Softmax(
	.param .u64 Softmax_param_0,
	.param .u64 Softmax_param_1,
	.param .u32 Softmax_param_2,
	.param .u32 Softmax_param_3
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<32>;
	.reg .b32 	%r<27>;
	.reg .b64 	%rd<28>;


	ld.param.u64 	%rd15, [Softmax_param_0];
	ld.param.u64 	%rd16, [Softmax_param_1];
	ld.param.u32 	%r11, [Softmax_param_2];
	ld.param.u32 	%r12, [Softmax_param_3];
	cvta.to.global.u64 	%rd1, %rd16;
	cvta.to.global.u64 	%rd2, %rd15;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r4, %r12;
	@%p1 bra 	BB52_11;

	mul.lo.s32 	%r13, %r4, %r11;
	mul.wide.s32 	%rd17, %r13, 4;
	add.s64 	%rd18, %rd2, %rd17;
	ld.global.f32 	%f1, [%rd18];
	setp.lt.s32	%p2, %r11, 2;
	mov.f32 	%f27, %f1;
	@%p2 bra 	BB52_4;

	mul.lo.s32 	%r16, %r11, %r4;
	mul.wide.s32 	%rd19, %r16, 4;
	add.s64 	%rd20, %rd19, %rd2;
	add.s64 	%rd24, %rd20, 4;
	mov.u32 	%r24, 1;
	mov.f32 	%f29, %f1;
	mov.f32 	%f28, %f1;
	bra.uni 	BB52_3;

BB52_13:
	add.s64 	%rd24, %rd4, 4;
	ld.global.f32 	%f29, [%rd4];
	mov.f32 	%f28, %f4;

BB52_3:
	mov.f32 	%f2, %f29;
	mov.f32 	%f3, %f28;
	mov.u64 	%rd4, %rd24;
	setp.lt.ftz.f32	%p3, %f3, %f2;
	selp.f32	%f4, %f2, %f3, %p3;
	add.s32 	%r24, %r24, 1;
	setp.lt.s32	%p4, %r24, %r11;
	mov.f32 	%f27, %f4;
	@%p4 bra 	BB52_13;

BB52_4:
	mov.f32 	%f5, %f27;
	mov.f32 	%f31, 0f322BCC77;
	setp.lt.s32	%p5, %r11, 1;
	@%p5 bra 	BB52_8;

	mov.f32 	%f16, 0f402DF854;
	lg2.approx.ftz.f32 	%f6, %f16;
	mul.lo.s32 	%r19, %r11, %r4;
	mul.wide.s32 	%rd21, %r19, 4;
	add.s64 	%rd22, %rd21, %rd2;
	add.s64 	%rd26, %rd22, 4;
	add.s64 	%rd25, %rd1, %rd21;
	mov.f32 	%f30, 0f00000000;
	mov.u32 	%r25, 0;
	mov.f32 	%f26, %f1;
	bra.uni 	BB52_6;

BB52_12:
	add.s64 	%rd26, %rd8, 4;
	add.s64 	%rd25, %rd25, 4;
	ld.global.f32 	%f26, [%rd8];

BB52_6:
	mov.f32 	%f7, %f26;
	mov.u64 	%rd8, %rd26;
	sub.ftz.f32 	%f17, %f7, %f5;
	mul.ftz.f32 	%f18, %f6, %f17;
	ex2.approx.ftz.f32 	%f19, %f18;
	st.global.f32 	[%rd25], %f19;
	add.ftz.f32 	%f30, %f30, %f19;
	add.s32 	%r25, %r25, 1;
	setp.lt.s32	%p6, %r25, %r11;
	@%p6 bra 	BB52_12;

	add.ftz.f32 	%f31, %f30, 0f322BCC77;

BB52_8:
	@%p5 bra 	BB52_11;

	mul.lo.s32 	%r23, %r11, %r4;
	mul.wide.s32 	%rd23, %r23, 4;
	add.s64 	%rd27, %rd1, %rd23;
	mov.u32 	%r26, 0;

BB52_10:
	ld.global.f32 	%f20, [%rd27];
	div.approx.ftz.f32 	%f21, %f20, %f31;
	st.global.f32 	[%rd27], %f21;
	add.s64 	%rd27, %rd27, 4;
	add.s32 	%r26, %r26, 1;
	setp.lt.s32	%p8, %r26, %r11;
	@%p8 bra 	BB52_10;

BB52_11:
	ret;
}

	// .globl	derSoftmax
.visible .entry derSoftmax(
	.param .u64 derSoftmax_param_0,
	.param .u64 derSoftmax_param_1,
	.param .u64 derSoftmax_param_2,
	.param .u32 derSoftmax_param_3,
	.param .u32 derSoftmax_param_4
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<24>;
	.reg .b32 	%r<31>;
	.reg .b64 	%rd<28>;


	ld.param.u64 	%rd5, [derSoftmax_param_0];
	ld.param.u64 	%rd6, [derSoftmax_param_1];
	ld.param.u64 	%rd7, [derSoftmax_param_2];
	ld.param.u32 	%r19, [derSoftmax_param_3];
	ld.param.u32 	%r18, [derSoftmax_param_4];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r2, %r1, %r3;
	mov.u32 	%r5, %ctaid.y;
	mov.u32 	%r6, %ntid.y;
	mov.u32 	%r7, %tid.y;
	mad.lo.s32 	%r8, %r5, %r6, %r7;
	setp.lt.s32	%p1, %r4, %r19;
	setp.lt.s32	%p2, %r8, %r18;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB53_12;
	bra.uni 	BB53_1;

BB53_1:
	mul.lo.s32 	%r20, %r4, %r6;
	mov.u32 	%r21, %nctaid.y;
	mad.lo.s32 	%r9, %r20, %r21, %r8;
	cvt.rn.f32.s32	%f12, %r9;
	ldu.global.f32 	%f13, [SharedMemorySize];
	setp.geu.ftz.f32	%p4, %f12, %f13;
	@%p4 bra 	BB53_3;

	cvta.to.global.u64 	%rd8, %rd6;
	mul.wide.s32 	%rd9, %r9, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.f32 	%f14, [%rd10];
	mov.u64 	%rd11, shared;
	add.s64 	%rd12, %rd11, %rd9;
	st.shared.f32 	[%rd12], %f14;

BB53_3:
	bar.sync 	0;
	mul.lo.s32 	%r30, %r4, %r18;
	add.s32 	%r22, %r8, %r30;
	cvta.to.global.u64 	%rd13, %rd7;
	mul.wide.s32 	%rd14, %r22, 4;
	add.s64 	%rd1, %rd13, %rd14;
	mov.u32 	%r29, 0;
	st.global.u32 	[%rd1], %r29;
	cvta.to.global.u64 	%rd15, %rd5;
	add.s64 	%rd16, %rd15, %rd14;
	ld.global.f32 	%f1, [%rd16];
	mov.f32 	%f23, 0f00000000;
	setp.lt.s32	%p5, %r18, 1;
	@%p5 bra 	BB53_11;

	mov.f32 	%f17, 0f3F800000;
	sub.ftz.f32 	%f2, %f17, %f1;
	ld.global.f32 	%f3, [SharedMemorySize];
	neg.s32 	%r28, %r8;
	mul.lo.s32 	%r27, %r18, %r4;
	cvt.s64.s32	%rd17, %r27;
	neg.s64 	%rd27, %rd17;
	mov.f32 	%f23, 0f00000000;

BB53_5:
	setp.eq.s32	%p6, %r28, 0;
	mov.f32 	%f21, %f2;
	@%p6 bra 	BB53_7;

	shl.b64 	%rd19, %rd27, 2;
	sub.s64 	%rd20, %rd15, %rd19;
	ld.global.f32 	%f18, [%rd20];
	neg.ftz.f32 	%f5, %f18;
	mov.f32 	%f21, %f5;

BB53_7:
	mov.f32 	%f6, %f21;
	cvt.rn.f32.s32	%f19, %r30;
	setp.lt.ftz.f32	%p7, %f19, %f3;
	@%p7 bra 	BB53_9;
	bra.uni 	BB53_8;

BB53_9:
	shl.b64 	%rd24, %rd27, 2;
	mov.u64 	%rd25, shared;
	sub.s64 	%rd26, %rd25, %rd24;
	ld.shared.f32 	%f22, [%rd26];
	bra.uni 	BB53_10;

BB53_8:
	cvta.to.global.u64 	%rd21, %rd6;
	shl.b64 	%rd22, %rd27, 2;
	sub.s64 	%rd23, %rd21, %rd22;
	ld.global.f32 	%f22, [%rd23];

BB53_10:
	mul.ftz.f32 	%f20, %f1, %f6;
	fma.rn.ftz.f32 	%f23, %f20, %f22, %f23;
	add.s32 	%r30, %r30, 1;
	add.s32 	%r28, %r28, 1;
	add.s64 	%rd27, %rd27, -1;
	add.s32 	%r29, %r29, 1;
	setp.lt.s32	%p8, %r29, %r18;
	@%p8 bra 	BB53_5;

BB53_11:
	st.global.f32 	[%rd1], %f23;

BB53_12:
	ret;
}


